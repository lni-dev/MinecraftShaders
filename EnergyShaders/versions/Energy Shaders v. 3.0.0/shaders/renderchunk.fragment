// __multiversion__
// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.

// To use centroid sampling we need to have version 300 es shaders, which requires changing:
// attribute to in
// varying to out when in vertex shaders or in when in fragment shaders
// defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
// texture2D to texture
#if __VERSION__ >= 300

	// version 300 code

	#ifdef MSAA_FRAMEBUFFER_ENABLED
		#define _centroid centroid
	#else
		#define _centroid
	#endif

	#ifndef BYPASS_PIXEL_SHADER
		#if defined(TEXEL_AA) && defined(TEXEL_AA_FEATURE)
			_centroid in highp vec2 uv0;
			_centroid in highp vec2 uv1;
		#else
			_centroid in vec2 uv0;
			_centroid in vec2 uv1;
		#endif
	#endif

	#define varying in
	#define texture2D texture
	out vec4 FragColor;
	#define gl_FragColor FragColor
#else

	// version 100 code

	#ifndef BYPASS_PIXEL_SHADER
		varying vec2 uv0;
		varying vec2 uv1;
	#endif
#endif


varying vec4 color;
varying POS3 fragPos;

#include "shaders/util.h"


#define E_FOG
#define USE_MOJANG_FOG_COLOR
#define E_FOG_COLOR vec3(0.3, 0.4, 0.7)
#define MIX_E_FOG_WITH_MOJANG_FOG
#define E_UNDERWATER_FOG
#define E_UNDERWATER_FOG_COLOR vec3(0.2, 0.4, 0.8)

#define E_SHADOW
#define E_SHADOW_WIDTH 0.87
#define E_SHADOW_FADE_IN
#define FADE_IN_E_SHADOW_WIDTH vec2(0.025, 1.0 / 0.025)

//#define USE_MOJANG_TORCH_LIGHT_AND_SHADOW

#define E_TORCH_LIGHT
#define E_TORCH_LIGHT_COLOR vec3(0.9, 0.15, 0.05)
#define E_TORCH_LIGHT_OFFSET -0.4
//#define USE_TORCH_LIGHT_OF_CHRISMAS_SHADERS
//#define EXPERIMENTAL_LIGHT

#define ENERGY_COLOR_MAP
#define SUN_LIGHT

#define TRANSPARENT_WATER
#define TRANSPARENT_WATER_OFFSET 0.65
#define E_WATER
#define E_WATER_COLOR_NEAR vec3(0.3, 0.5, 0.8)
#define E_WATER_COLOR_FAR vec3(0.3, 0.8, 0.7)


uniform sampler2D TEXTURE_0;
uniform sampler2D TEXTURE_1;
uniform sampler2D TEXTURE_2;

uniform float RENDER_DISTANCE;
uniform vec4 FOG_COLOR;
uniform vec2 FOG_CONTROL;
uniform highp float TIME;

vec4 EnergyColorMap(vec4 c){
	float R,G,B;

	R = c.r;
	G = c.g;
	B = c.b;

	R = mix(R,R * 1.5, max(0.0, R - (G + B)));
	G = mix(G,G * 1.5, max(0.0, G - (R + B)));
	B = mix(B,B * 1.5, max(0.0, B - (G + R)));

	return vec4(R, G, B, c.a);
}

void main()
{

#ifdef BYPASS_PIXEL_SHADER
	gl_FragColor = vec4(0, 0, 0, 0);
	return;
#else

vec4 fog = vec4(E_FOG_COLOR, 0.0);
float shE = 0.0;
bool water = false;
bool underwater = false;

#ifdef NEAR_WATER
	water = true;
#else
	if(FOG_CONTROL.x < 0.01){
		underwater = true;
	}
#endif

#ifdef USE_MOJANG_FOG_COLOR
	fog = FOG_COLOR;
#endif

#if !defined(TEXEL_AA) || !defined(TEXEL_AA_FEATURE)
	vec4 diffuse = texture2D( TEXTURE_0, uv0 );
#else
	vec4 diffuse = texture2D_AA(TEXTURE_0, uv0 );
#endif

	vec4 inColor = color;

#ifdef SEASONS_FAR
	diffuse.a = 1.0;
	inColor.b = 1.0;
#endif

#ifdef ALPHA_TEST
	#ifdef ALPHA_TO_COVERAGE
		float alphaThreshold = .05;
	#else
		float alphaThreshold = .5;
	#endif
	if(diffuse.a < alphaThreshold)
		discard;
#endif

#ifdef USE_MOJANG_TORCH_LIGHT_AND_SHADOW
#if !defined(ALWAYS_LIT)
	diffuse = diffuse * texture2D( TEXTURE_1, uv1 );
#endif
#endif

#ifndef SEASONS

	diffuse.rgb *= inColor.rgb;
#else
	vec2 uv = inColor.xy;
	diffuse.rgb *= mix(vec3(1.0,1.0,1.0), texture2D( TEXTURE_2, uv).rgb*2.0, inColor.b);
	diffuse.rgb *= inColor.aaa;
	diffuse.a = 1.0;
#endif

#ifdef TRANSPARENT_WATER
	if(water){
		float le = length(fragPos.xz) / (RENDER_DISTANCE*0.5) + TRANSPARENT_WATER_OFFSET;

		diffuse.a = min(1.0, le);

	}
#endif

#ifdef E_WATER
	if(water){
		diffuse.rgb = mix(E_WATER_COLOR_NEAR, E_WATER_COLOR_FAR, diffuse.a - TRANSPARENT_WATER_OFFSET);
	}
#endif

#ifdef E_SHADOW
	if(uv1.y <= E_SHADOW_WIDTH){	//if rendering in shadow

		shE = 1.0;

		if(uv1.y >= E_SHADOW_WIDTH - FADE_IN_E_SHADOW_WIDTH.x){
			#ifdef E_SHADOW_FADE_IN
				float fadeInE = (uv1.y - (E_SHADOW_WIDTH - FADE_IN_E_SHADOW_WIDTH.x)) * FADE_IN_E_SHADOW_WIDTH.y;	//calculate fade in
				shE = mix(1.0, 0.0, fadeInE);
			#endif
		}
		shE = max(0.0, shE - max(0.0, uv1.x + E_TORCH_LIGHT_OFFSET));
	}
#endif

#ifdef E_TORCH_LIGHT
	#ifdef USE_TORCH_LIGHT_OF_CHRISMAS_SHADERS
		diffuse.rgb = mix(diffuse.rgb, vec3(0.7, 0.3, 0.2), max(0.0, uv1.x-0.6)*(abs(sin(TIME*5.0-cos(TIME*2.0)+sin(TIME)))*0.5+1.5));
	#else
		vec3 experimental = vec3(1.0);

		#ifdef EXPERIMENTAL_LIGHT
			experimental =  diffuse.rgb * (vec3(1.0) - diffuse.rgb)*2.7;
		#endif

		diffuse.rgb += max(vec3(0.0), E_TORCH_LIGHT_COLOR * (uv1.x + E_TORCH_LIGHT_OFFSET)) * experimental;
	#endif
#endif

#ifdef E_SHADOW
	diffuse.rgb = mix(diffuse.rgb, diffuse.rgb * max(0.1, min(0.5, uv1.y)), shE);
#endif

#ifdef SUN_LIGHT
	diffuse.rgb *= max(vec3(0.0), vec3(0.7) - diffuse.rgb)*1.5 + vec3(1.0);
#endif

#ifdef ENERGY_COLOR_MAP
	diffuse = EnergyColorMap(diffuse);
#endif

//Don't use #ifdef FOG here, to fix the cutted fog bug - add it again if it hurts performance to much
#ifdef E_FOG
	float le = length(fragPos.xz);

	if(underwater){
		#ifdef E_UNDERWATER_FOG
			le *= 0.1;
			le = min(1.0, le);
			#ifdef MIX_E_FOG_WITH_MOJANG_FOG
				fog.rgb = mix(E_UNDERWATER_FOG_COLOR, fog.rgb, le);
			#endif

			diffuse.rgb = mix(diffuse.rgb, fog.rgb, le);
		#endif
	}

	if(!underwater){

		le /= RENDER_DISTANCE;
		le = min(1.0, le);

		#ifdef MIX_E_FOG_WITH_MOJANG_FOG
			fog.rgb = mix(E_FOG_COLOR, fog.rgb, le);
		#endif

		diffuse.rgb = mix(diffuse.rgb, fog.rgb, max(0.0, le - 0.2));
		diffuse.a = max(min(1.0,fog.a * le), diffuse.a);
	}
#endif

	gl_FragColor = diffuse;

#endif // BYPASS_PIXEL_SHADER
}
