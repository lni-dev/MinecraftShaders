// __multiversion__
// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.

// To use centroid sampling we need to have version 300 es shaders, which requires changing:
// attribute to in
// varying to out when in vertex shaders or in when in fragment shaders
// defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
// texture2D to texture
#if __VERSION__ >= 300
#define attribute in
#define varying out

#ifdef MSAA_FRAMEBUFFER_ENABLED
#define _centroid centroid
#else
#define _centroid
#endif

		_centroid out vec2 uv0;
		_centroid out vec2 uv1;


#else

		varying vec2 uv0;
		varying vec2 uv1;

#endif




varying vec4 color;
varying POS3 posE;
varying vec3 waves;
varying vec3 screen_pos;

//for reflection:
varying highp vec3 position; 
varying highp vec3 look;
varying float flag_waterplane;

#ifdef FOG
	varying vec4 fogColor;
#endif

#ifdef NEAR_WATER
	varying float cameraDist;
#endif

#ifdef AS_ENTITY_RENDERER
uniform MAT4 WORLDVIEWPROJ;
#else
uniform MAT4 WORLDVIEW;
//uniform MAT4 WORLD;
uniform MAT4 PROJ;
#endif
uniform vec4 FOG_COLOR;
uniform vec2 FOG_CONTROL;
uniform float RENDER_DISTANCE;
uniform vec2 VIEWPORT_DIMENSION;
uniform vec4 CURRENT_COLOR;		//current color r contains the offset to apply to the fog for the "fade in"
uniform POS4 CHUNK_ORIGIN_AND_SCALE;
uniform POS3 VIEW_POS;
uniform float FAR_CHUNKS_DISTANCE;

uniform highp float TIME;

attribute POS4 POSITION;
attribute vec4 COLOR;
attribute vec2 TEXCOORD_0;
attribute vec2 TEXCOORD_1;


//SETTINGS
const float rA = 1.0;
const float rB = 1.0;
const vec3 UNIT_Y = vec3(0,1,0);
const float DIST_DESATURATION = 56.0 / 255.0;

//Waves
	const bool LeaveWaves = false;
	const bool GrassWaves = false;
	
	const bool WaterWaves = false;
		const float waveWidth = 10.5;
		const float waveHeight = 0.0889;
		const float speedwav = 1.3;

const float pi = 3.14159265358979;




float random(float x, float z){
  float ra = sin(x+(z*0.5+(x-10.0)))*0.1;
  float rb = sin(z+(x*0.5+(z-10.0)))*0.1;
  
  float rc = sin(x+cos(z+sin(x+z)));
  float rd = cos(z+sin(x+sin(z+x)));
  
  float re = sin(ra-cos(rc+sin(ra+rb)));
  float rf = cos(rb-cos(rd+sin(rb+rc)));
  return sin(ra+rb-rc+rd-re+rf);
}


void main()
{
    POS4 worldPos;
#ifdef AS_ENTITY_RENDERER
		POS4 pos = WORLDVIEWPROJ * POSITION;
		worldPos = pos;
#else
    worldPos.xyz = (POSITION.xyz * CHUNK_ORIGIN_AND_SCALE.w) + CHUNK_ORIGIN_AND_SCALE.xyz;
    worldPos.w = 1.0;

    // Transform to view space before projection instead of all at once to avoid floating point errors
    // Not required for entities because they are already offset by camera translation before rendering
    // World position here is calculated above and can get huge
    POS4 pos = vec4(0.0);//WORLDVIEW * worldPos;
    //pos = PROJ * pos;
#endif
    gl_Position = pos;

//=:=========:=//
//Var,Vec,..   //
//=:=========:=//

    uv0 = TEXCOORD_0;
    uv1 = TEXCOORD_1;
	color = COLOR;

   
    vec2 tex = floor(vec2(TEXCOORD_0.x * 32.0, TEXCOORD_0.y * 16.0));
    waves = vec3(0.0);
    float sw = 1.25;
    posE = worldPos.xyz; //fragment position
    POS3 fJOB =worldPos.xyz+VIEW_POS;//worldPos.xyz;
    float uw = 0.0; //underwater
    float fogCon = FOG_CONTROL.x;
    float fogtoorainy =(1.0 - fogCon)*0.6;
    vec2 itsnight = vec2(0.0);
    float holefog = FOG_COLOR.r+FOG_COLOR.g+FOG_COLOR.b;
    


//=:=========:=//
//BIG CALC     //
//=:=========:=//  
    
    //is it night?
    if(holefog <= 0.4){
        itsnight.x = 1.0;
        itsnight.y = 1.0-holefog*2.5;
    }

    //check if we are underwater
    if(FOG_CONTROL.x <= 0.01){uw = 1.0;}

    
    
    position = worldPos.xyz  + VIEW_POS.xyz; look = worldPos.xyz ;
    float fractposy = fract(position.y);
    
    if(fractposy < 0.1 && fractposy >= 0.0){ flag_waterplane = 1.0; } 
    else{ flag_waterplane = 0.0; }


//=:=========:=//
//CODE         //
//=:=========:=//     
 


#if defined(FOG) || defined(NEAR_WATER)
	#ifdef FANCY
		vec3 relPos = -worldPos.xyz;
		float cameraDepth = length(relPos);
		#ifdef NEAR_WATER
			cameraDist = cameraDepth / FAR_CHUNKS_DISTANCE;
		#endif
	#else
		float cameraDepth = pos.z;
		#ifdef NEAR_WATER
			vec3 relPos = -worldPos.xyz;
			float camDist = length(relPos);
			cameraDist = camDist / FAR_CHUNKS_DISTANCE;
		#endif
	#endif
#endif

///// apply fog

#ifdef FOG


    float fogdis = length(-worldPos.xyz)/(RENDER_DISTANCE*0.75);
    
    fogColor.a = min(1.0, max(0.0,fogdis-(0.7)))*0.767;
    fogColor.r = FOG_COLOR.r;
    fogColor.g = FOG_COLOR.g;
    fogColor.b = FOG_COLOR.b;
    
	fogColor = mix(fogColor, vec4(FOG_COLOR.rgb, 1.0), min(1.0, max(0.0, (fogColor.a - 0.5)*5.0)));
	fogColor.a *= fogColor.a;
	
    
    
    if(uw == 1.0){
    #ifndef NEAR_WATER
	fogdis = length(-worldPos.xyz);
    
		fogColor.a = max(0.3, min(1.0, fogdis * 0.01));
		fogColor.rgb = vec3(0.15,0.4,0.8);

    POS3 fJOB2 = fJOB.xyz;

    float WScale = 2.0 - min(1.9, fogdis*0.1);//min(1.0, 1.0 - fogdis * 0.5);
		
	waves.x = sin(worldPos.x * WScale + TIME * 0.5) * sin(worldPos.z * WScale + TIME * 0.5) * max(0.0, fogdis - 3.0)*0.1;
	waves.z = waves.x;
	
    #endif
    #ifdef NEAR_WATER
    fogColor.rgb = vec3(0.15,0.4,0.8);
    color.a = 0.0;
    color.rgb = fogColor.rgb;
    fogColor.a = 0.4;
    #endif
    }  


#endif


#ifdef NEAR_WATER

if(WaterWaves){
  POS3 wp = (worldPos.xyz+VIEW_POS);
  POS3 cp = wp;
  
  waves.y = sin(waveWidth * wp.z * wp.x + TIME * speedwav); 
  waves.y = sin(waveWidth * wp.x + TIME * speedwav) * cos(waveWidth * wp.z+TIME*speedwav)*waves.y *waveHeight*0.9;
}//End of WaterWaves		
	#ifdef FANCY  
		float F = dot(normalize(relPos), UNIT_Y);
		F = 1.0 - max(F, 0.1);
		F = 1.0 - mix(F*F*F*F, 1.0, min(1.0, cameraDepth / FAR_CHUNKS_DISTANCE));

		color.rg -= vec2(F * DIST_DESATURATION);

		vec4 depthColor = vec4(color.rgb * 0.5, 1.0);
		vec4 traspColor = vec4(color.rgb * max(0.4,0.55+waves.y), 0.5);
		vec4 surfColor = vec4(color.rgb, 1.0);

		vec4 nearColor = mix(traspColor, depthColor, color.a);
		color = mix(surfColor, nearColor, F);
 if(uw == 1.0){color.a = 0.0;}
	#else
		vec4 surfColor = vec4(color.rgb, 1.0);
		color = surfColor;
		color.a = 0.5; //pos.z / FAR_CHUNKS_DISTANCE + 0.5;
	#endif //FANCY
#endif


#ifndef AS_ENTITY_RENDERER
POS4 NewPos = POSITION;
/*NewPos*/worldPos.xyz += waves;

//NewPos.xyz = (NewPos.xyz * CHUNK_ORIGIN_AND_SCALE.w) + CHUNK_ORIGIN_AND_SCALE.xyz;

//NewPos.xyz += waves;
//NewPos.w = 1.0;

pos = WORLDVIEW * worldPos;
pos = PROJ * pos;

screen_pos.xy = pos.xy / (pos.z + 1.0);
screen_pos.z = pos.z;

gl_Position = pos;

#endif

}
