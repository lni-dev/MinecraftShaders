// __multiversion__
// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.

// To use centroid sampling we need to have version 300 es shaders, which requires changing:
// attribute to in
// varying to out when in vertex shaders or in when in fragment shaders
// defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
// texture2D to texture
#if __VERSION__ >= 300

// version 300 code

#define varying in
#define texture2D texture
out vec4 FragColor;
#define gl_FragColor FragColor

#else

// version 100 code

#endif

varying vec4 color;
varying POS3 sp;
varying float nearf;
varying float ncb;

uniform vec4 FOG_COLOR;
uniform highp float TIME;
uniform vec2 FOG_CONTROL;
uniform POS3 VIEW_POS;

const float pi = 3.14159265358979;

highp float random(highp float x, highp float z){
  highp float ra = sin(x+(z*0.5+(x-10.0)))*0.1;
  highp float rb = sin(z+(x*0.5+(z-10.0)))*0.1;
  
  highp float rc = sin(x+cos(z+sin(x+z)));
  highp float rd = cos(z+sin(x+sin(z+x)));
  
  highp float re = sin(ra-cos(rc+sin(ra+rb)));
  highp float rf = cos(rb-cos(rd+sin(rb+rc)));
  return sin(ra+rb-rc+rd-re+rf);
}

void main(){
float cloud = 0.0;
float dis = max(0.0,abs(sp.z)-200.0)/300.0;
dis -= abs(sp.x)/300.0;
float SkyHeight =  max(0.0,length(abs(sp.xz)));

dis = min(1.0,max(0.0,dis));
vec3 F = FOG_COLOR.rgb;
 
 vec4 diffuse = color;
 vec3 sc = vec3(color.r + 0.4,color.g, color.b);
 
 diffuse.rgb = mix(diffuse.rgb, sc, dis);
 diffuse.rgb = mix(diffuse.rgb, F, nearf);
 
 diffuse.rgb = mix(color.rgb, diffuse.rgb, max(0.0,(F.r-0.5))*3.0);
 
 
POS3 cp = (sp) * vec3(10.0);
 
float ca;
highp float x = cp.x+TIME*0.1;
highp float z = cp.z+TIME*0.1;
float y = cp.y;

ca = sin(x*0.5-z*0.5)+cos(x*0.6+z*0.6)+sin(-z+x);
cloud = random(x*2.0,z*2.0)-random(ca,pi);

cloud *= 0.5;


//vec4 cloudC = (1.0, 1.0, 1.0, 1.0 - min(1.0,cloud+1.0));
 
	gl_FragColor = mix(diffuse, vec4(1.0), max(0.0, min(1.0, 1.0-min(1.0,cloud+1.0))-ncb));
}