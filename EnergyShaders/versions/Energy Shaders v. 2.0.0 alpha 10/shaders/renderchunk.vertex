// __multiversion__
// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.

// To use centroid sampling we need to have version 300 es shaders, which requires changing:
// attribute to in
// varying to out when in vertex shaders or in when in fragment shaders
// defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
// texture2D to texture
#if __VERSION__ >= 300
#define attribute in
#define varying out

#ifdef MSAA_FRAMEBUFFER_ENABLED
#define _centroid centroid
#else
#define _centroid
#endif

_centroid out vec2 uv0;
_centroid out vec2 uv1;

#else

varying vec2 uv0;
varying vec2 uv1;

#endif



varying vec4 color;
varying POS3 posE;
varying vec3 waves;

#ifdef FOG
	varying vec4 fogColor;
#endif

#ifdef NEAR_WATER
	varying float cameraDist;
#endif

#ifdef AS_ENTITY_RENDERER
uniform MAT4 WORLDVIEWPROJ;
#else
uniform MAT4 WORLDVIEW;
uniform MAT4 PROJ;
#endif
uniform vec4 FOG_COLOR;
uniform vec2 FOG_CONTROL;
uniform float RENDER_DISTANCE;
uniform vec2 VIEWPORT_DIMENSION;
uniform vec4 CURRENT_COLOR;		//current color r contains the offset to apply to the fog for the "fade in"
uniform POS4 CHUNK_ORIGIN_AND_SCALE;
uniform POS3 VIEW_POS;
uniform float FAR_CHUNKS_DISTANCE;

uniform highp float TIME;

attribute POS4 POSITION;
attribute vec4 COLOR;
attribute vec2 TEXCOORD_0;
attribute vec2 TEXCOORD_1;

const float rA = 1.0;
const float rB = 1.0;
const vec3 UNIT_Y = vec3(0,1,0);
const float DIST_DESATURATION = 56.0 / 255.0;
const float pi = 3.14159265358979;

void main()
{
    POS4 worldPos;
#ifdef AS_ENTITY_RENDERER
		POS4 pos = WORLDVIEWPROJ * POSITION;
		worldPos = pos;
#else
    worldPos.xyz = (POSITION.xyz * CHUNK_ORIGIN_AND_SCALE.w) + CHUNK_ORIGIN_AND_SCALE.xyz;
    worldPos.w = 1.0;

    // Transform to view space before projection instead of all at once to avoid floating point errors
    // Not required for entities because they are already offset by camera translation before rendering
    // World position here is calculated above and can get huge
    POS4 pos = WORLDVIEW * worldPos;
    pos = PROJ * pos;
#endif
    gl_Position = pos;

    uv0 = TEXCOORD_0;
    uv1 = TEXCOORD_1;
	color = COLOR;

   
    vec2 tex = floor(vec2(TEXCOORD_0.x * 32.0, TEXCOORD_0.y * 16.0));
    waves = vec3(0.0);
    float sw = 1.25;
    posE = worldPos.xyz; //fragment position
    POS3 fJOB = POSITION.xyz;
    float uw = 0.0; //underwater
    float fogCon = FOG_CONTROL.x;
    float fogtoorainy =(1.0 - fogCon)*0.6;

    //check if we are underwater
    if(FOG_CONTROL.x <= 0.01){uw = 1.0;}

   //jungle leave waves
    if(tex.y == 2.0 && tex.x == 27.0){
        float hw = 0.04 + sin(TIME)/75.0;


	       waves.x = sin(0.6 * fJOB.x + TIME * sw) * cos(0.6 * fJOB.z +TIME*sw)*hw;

	        waves.y = sin(0.6 * fJOB.x + TIME * sw) * cos(0.6 * fJOB.z +TIME*sw) *hw;

	         waves.z = sin(0.6 * fJOB.x + TIME * 0.9) * cos(0.6 * fJOB.z +TIME*sw)*hw;
    }

    #ifdef ALPHA_TEST

    //leave waves
    if ((tex.y == 2.0 && (tex.x == 24.0 || tex.x == 25.0 || tex.x == 26.0)) || (tex.y == 3.0 && (tex.x == 1.0 || tex.x == 2.0))){

        float hw = 0.04 + sin(TIME)/75.0;


	       waves.x = sin(0.6 * fJOB.x + TIME * sw) * cos(0.6 * fJOB.z +TIME*sw)*hw;

	        waves.y = sin(0.6 * fJOB.x + TIME * sw) * cos(0.6 * fJOB.z +TIME*sw) *hw;

	         waves.z = sin(0.6 * fJOB.x + TIME * 0.9) * cos(0.6 * fJOB.z +TIME*sw)*hw;
    }

    //vine waves
    if(tex.y == 5.0 && tex.x == 19.0){
 

        float hw = 0.04 + sin(TIME)/75.0;


	       waves.x = sin(0.6 * fJOB.x + TIME * sw) * cos(0.6 * fJOB.z +TIME*sw)*hw;

	       waves.y = sin(0.6 * fJOB.x + TIME * sw) * cos(0.6 * fJOB.z +TIME*sw) *hw;

	        waves.z = sin(0.6 * fJOB.x + TIME * 0.9) * cos(0.6 * fJOB.z +TIME*sw)*hw;

       }
    

     //grass and farn waves
    if ((tex.y == 5.0 && tex.x == 9.0)||(tex.y == 5.0 && tex.x == 8.0)){ 

        float ww = sin(TIME)/75.0;
        waves.x = sin( fJOB.y *pi - fJOB.x *pi+TIME *4.0) * (0.04+ww); 
				 waves.z = sin( fJOB.y *pi - fJOB .z *pi+TIME *4.0) * (0.04+ww); 

				 if (waves.x < -0.1){
					    waves.x *= 0.5;
			  	}
				 if (waves.z < -0.1){
					    waves.z *= 0.5;
				 }
    }
    #endif



#if defined(FOG) || defined(NEAR_WATER)
	#ifdef FANCY
		vec3 relPos = -worldPos.xyz;
		float cameraDepth = length(relPos);
		#ifdef NEAR_WATER
			cameraDist = cameraDepth / FAR_CHUNKS_DISTANCE;
		#endif
	#else
		float cameraDepth = pos.z;
		#ifdef NEAR_WATER
			vec3 relPos = -worldPos.xyz;
			float camDist = length(relPos);
			cameraDist = camDist / FAR_CHUNKS_DISTANCE;
		#endif
	#endif
#endif

///// apply fog

#ifdef FOG

  /*
	float len = cameraDepth / RENDER_DISTANCE;
	#ifdef ALLOW_FADE
		len += CURRENT_COLOR.r;
	#endif
  
    fogColor.rgb = FOG_COLOR.rgb;
	fogColor.a = clamp((len - FOG_CONTROL.x) / (FOG_CONTROL.y - FOG_CONTROL.x), 0.0, 1.0);
    */
    float fogdis = length(-worldPos.xyz)/(RENDER_DISTANCE*FOG_CONTROL.x);
    
    

    fogColor.a = min(1.5,max(0.0,fogdis-(0.5+fogtoorainy)))*0.567;
    fogColor.r = FOG_COLOR.r-fogCon;
    fogColor.g = FOG_COLOR.g-fogCon;
    fogColor.b = FOG_COLOR.b * 1.3 - fogCon;
    
    
    
    if(uw == 1.0){
    fogColor.rgb = vec3(0.1,0.3,0.7);
    fogColor.a = 0.5;

    POS3 fJOB2 = fJOB.xyz*720.0;

    waves.y =sin(fJOB2.x-fJOB2.z-fJOB2.y + TIME*1.2)*0.069;
    waves.x = waves.y;
    waves.z = waves.x;
    }  


#endif


#ifdef NEAR_WATER
  POS3 wp = POSITION.xyz; //worldPos.xyz*720.0;
  POS3 cp = wp;


 //waves.y = sin(wp.x  + TIME)*0.069;
// waves.y -= cos(wp.z + TIME)*0.068;

float wpxp = sin(wp.x+wp.z-sin(wp.y-wp.x+wp.z)+cos(wp.z +wp.x+wp.y-cos(wp.x- sin(wp.z - wp.y)+wp.x)))*2.0;

waves.y = cos((wp.x*1.5 +wpxp)+TIME)*0.07;

waves.y -= sin(wp.z*0.6+TIME)*0.087;

waves.y = sin(wp.x);

waves.y *= 0.07;


	#ifdef FANCY  
		float F = dot(normalize(relPos), UNIT_Y);
		F = 1.0 - max(F, 0.1);
		F = 1.0 - mix(F*F*F*F, 1.0, min(1.0, cameraDepth / FAR_CHUNKS_DISTANCE));

		color.rg -= vec2(F * DIST_DESATURATION);

		vec4 depthColor = vec4(color.rgb * 0.5, 1.0);
		vec4 traspColor = vec4(color.rgb * max(0.4,0.55+waves.y*5.0), 0.5);
		vec4 surfColor = vec4(color.rgb, 1.0);

		vec4 nearColor = mix(traspColor, depthColor, color.a);
		color = mix(surfColor, nearColor, F);

	#else
		vec4 surfColor = vec4(color.rgb, 1.0);
		color = surfColor;
		color.a = pos.z / FAR_CHUNKS_DISTANCE + 0.5;
	#endif //FANCY
#endif


#ifndef AS_ENTITY_RENDERER
POS4 NewPos = POSITION;
NewPos.xyz += waves;

NewPos.xyz = (NewPos.xyz * CHUNK_ORIGIN_AND_SCALE.w) + CHUNK_ORIGIN_AND_SCALE.xyz;

NewPos.w = 1.0;

pos = WORLDVIEW * NewPos;
pos = PROJ * pos;

gl_Position = pos;
#endif

}
