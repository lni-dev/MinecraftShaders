// __multiversion__
// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.

// To use centroid sampling we need to have version 300 es shaders, which requires changing:
// attribute to in
// varying to out when in vertex shaders or in when in fragment shaders
// defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
// texture2D to texture
#if __VERSION__ >= 300

// version 300 code

#ifdef MSAA_FRAMEBUFFER_ENABLED
#define _centroid centroid
#else
#define _centroid
#endif

#if defined(TEXEL_AA) && defined(TEXEL_AA_FEATURE)
_centroid in highp vec2 uv0;
_centroid in highp vec2 uv1;
#else
_centroid in vec2 uv0;
_centroid in vec2 uv1;
#endif

#define varying in
#define texture2D texture
out vec4 FragColor;
#define gl_FragColor FragColor

#else

// version 100 code
varying vec2 uv0;
varying vec2 uv1;

#endif


varying vec4 color;
varying vec3 posE;
varying vec3 waves;

#ifdef FOG
varying vec4 fogColor;
#endif

#ifdef NEAR_WATER
varying float cameraDist;
#endif

#include "shaders/util.h"

uniform sampler2D TEXTURE_0;
uniform sampler2D TEXTURE_1;
uniform sampler2D TEXTURE_2;

uniform highp float TIME;


/*
highp float cloudmap(vec3 cp){

float pi = 3.14159265358979;
float ca = sin(length(cp.xz)*pi);
ca += cos(sin(cp.x-cp.z)*pi + length(cp.xyz)*pi);
float cb = sin(length(cp.xyz*pi)*pi);
cb += cos(sin(cp.x+cp.z)*pi - length(cp.xyz/pi)*pi);
float cc = cos(length(vec3(ca,cp.x+cp.z,cb))*pi);
float cd = sin(cp.x-cp.z+pi*cp.z/pi + cos(length(vec2(cos(cp.x*pi-cp.z),sin(cp.z*pi+cp.x)))));
float cloud = length(vec2(ca,cb))*0.25 - cc*0.3 + cd;

cloud -= 0.2;
return cloud *= 0.5;
}

*/

void main()
{


float shE = 0.0;
float fadeInE = 0.0;
float shwE = 0.88;
vec2 fSwE = vec2(0.015,0.0);
fSwE.y = 1.0/fSwE.x;

vec4 watercolor = vec4(0.1,0.1,0.4,0.5);

float tlfE = pow(uv1.x*1.25,7.0);



#if !defined(TEXEL_AA) || !defined(TEXEL_AA_FEATURE)
	vec4 diffuse = texture2D( TEXTURE_0, uv0 );
#else
	vec4 diffuse = texture2D_AA(TEXTURE_0, uv0 );
#endif

	vec4 inColor = color;
	
#ifdef SEASONS_FAR
	diffuse.a = 1.0;
	inColor.b = 1.0;
#endif

#ifdef ALPHA_TEST
	#ifdef ALPHA_TO_COVERAGE
		float alphaThreshold = .05;
	#else
		float alphaThreshold = .5;
	#endif
	if(diffuse.a < alphaThreshold)
		discard;
#endif
	
	diffuse = diffuse * texture2D( TEXTURE_1, uv1 );

#ifndef SEASONS

#if !defined(ALPHA_TEST) && !defined(BLEND)
	diffuse.a = inColor.a;
#elif defined(BLEND)
	diffuse.a *= inColor.a;
	#ifdef NEAR_WATER
		float alphaFadeOut = clamp(cameraDist, 0.0, 1.0);
		diffuse.a = mix(diffuse.a, 1.0, alphaFadeOut);
	#endif
#endif	
	
	diffuse.rgb *= inColor.rgb;
#else
	vec2 uv = inColor.xy;
	diffuse.rgb *= mix(vec3(1.0,1.0,1.0), texture2D( TEXTURE_2, uv).rgb*2.0, inColor.b);
	diffuse.rgb *= inColor.aaa;
	diffuse.a = 1.0;
#endif

#ifdef FOG
	diffuse.rgb = mix( diffuse.rgb, fogColor.rgb, fogColor.a );
#endif

//shadows
if(uv1.y <= shwE){
shE = 1.0;
if(uv1.y >= shwE-fSwE.x){
    fadeInE = (uv1.y - (shwE-fSwE.x))*fSwE.y;
    shE = mix(1.0,0.0,fadeInE);
}
}
//shE = min(0.0,shE-tlfE);



/*
#ifdef NEAR_WATER

//float refE = cloudmap(posE);
float refE2 = cloudmap(vec3(posE.x,128.0,posE.z)+ TIME);
vec4 cloud = vec4(1.0,1.0,1.0,0.7);

diffuse = mix(diffuse,cloud,refE2);

#endif

*/

#ifdef NEAR_WATER
vec4 odiffuse = diffuse;
diffuse = watercolor;

diffuse.a += waves.y+((odiffuse.a-0.5)*0.2);
diffuse.b += waves.y;
diffuse.g += odiffuse.a-0.5;


#endif



//sunlight
float isl_f= 1.0-(diffuse.r+diffuse.g+diffuse.b)/3.0;
vec4 isl_v =vec4(1.0+isl_f,0.9+isl_f,0.8+isl_f,1.0);

isl_v.rgb *= 1.0-shE*1.1;
isl_v.rgb = max(vec3(1.0),isl_v.rgb);

diffuse.rgb *= isl_v.rgb;


vec4 torchlightE = vec4(0.85, 0.2, -0.25, 0.0)* pow(uv1.x *1.25, 7.0);

diffuse += torchlightE;


	gl_FragColor = diffuse;
}
