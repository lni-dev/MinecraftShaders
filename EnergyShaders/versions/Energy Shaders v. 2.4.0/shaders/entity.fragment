// __multiversion__
// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.

// To use centroid sampling we need to have version 300 es shaders, which requires changing:
// attribute to in
// varying to out when in vertex shaders or in when in fragment shaders
// defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
// texture2D to texture
#if __VERSION__ >= 300
	// version 300 code
	#define varying in
	#define texture2D texture
	out vec4 FragColor;
	#define gl_FragColor FragColor

	#ifdef MSAA_FRAMEBUFFER_ENABLED
		#define _centroid centroid
	#else
		#define _centroid
	#endif

	#ifndef NO_TEXTURE
		_centroid in vec2 uv;
	#endif
#else
	// version 100 code
	#ifndef NO_TEXTURE
		#if defined(TEXEL_AA) && defined(TEXEL_AA_FEATURE)
			varying highp vec2 uv;
		#else
			varying vec2 uv;
		#endif
	#endif
#endif

#include "shaders/util.h"

uniform sampler2D TEXTURE_0;
uniform sampler2D TEXTURE_1;
uniform vec4 FOG_COLOR;
uniform vec2 FOG_CONTROL;
uniform float RENDER_DISTANCE;

#ifdef USE_MULTITEXTURE
	uniform sampler2D TEXTURE_2;
#endif

varying vec4 light;
varying vec4 fogColor;
varying POS3 posE;

#ifdef USE_OVERLAY
	varying vec4 overlayColor;
#endif

#ifdef TINTED_ALPHA_TEST
varying float alphaTestMultiplier;
#endif

#if defined(USE_COLOR_MASK) || defined(ITEM_IN_HAND) || defined(COLOR_SECOND_TEXTURE)
	varying vec4 changeColor;
#endif

#ifdef GLINT
	varying vec2 layer1UV;
	varying vec2 layer2UV;
	varying vec4 tileLightColor;
	varying vec4 glintColor;
#endif

vec4 glintBlend(vec4 dest, vec4 source) {
	// glBlendFuncSeparate(GL_SRC_COLOR, GL_ONE, GL_ONE, GL_ZERO)
	return vec4(source.rgb * source.rgb, source.a) + vec4(dest.rgb, 0.0);
}

#ifdef USE_EMISSIVE
#define NEEDS_DISCARD(C)	(C.a + C.r + C.g + C.b == 0.0)
#else
#ifndef USE_COLOR_MASK
#define NEEDS_DISCARD(C)	(C.a < 0.5)
#else
#define NEEDS_DISCARD(C)	(C.a <= 0.0)
#endif
#endif

/*========================SETTINGS========================*/
/* You can Edit this to change the look of Energy Shaders */
/*        Energy Shaders is created by Pro Coder          */
/*========================SETTINGS========================*/

#define SUN_LIGHT
#define COLOR_MAP

#define RAIN_EFFECT
#define RAIN_COLOR vec4(0.441,0.46,0.484, 0.0)


/*=====================STOP=====================*/
/* Stop here your Editing without permission of */
/*                   Pro Coder                  */
/*    Energy Shaders is created by Pro Coder    */
/*=====================STOP=====================*/

vec4 EnergyColorMap(vec4 c){
	float R,G,B;
	
	R = c.r;
	G = c.g;
	B = c.b;
	
	R = mix(R,R * 1.5, max(0.0, R - (G + B)));
	G = mix(G,G * 1.5, max(0.0, G - (R + B)));
	B = mix(B,B * 1.5, max(0.0, B - (G + R)));

	return vec4(R, G, B, c.a);
}

/*=====================STOP=====================*/
/* Stop here your Editing without permission of */
/*                   Pro Coder                  */
/*    Energy Shaders is created by Pro Coder    */
/*=====================STOP=====================*/

void main()
{
	vec4 color = vec4(1.0);




#ifdef RAIN_EFFECT
		vec4 raincolor = RAIN_COLOR;
		float rain = min(1.0, max(0.0, 1.0-pow(FOG_CONTROL.y,5.0))*2.0);	//For the rain, use FOG_CONTROL.y, because it is much smoother
		if(rain > 0.0){
			raincolor.a = min(1.0,length(posE.xz)/RENDER_DISTANCE); 
			raincolor.a = min(1.0, raincolor.a + 0.3);
			raincolor.a = max(0.0, raincolor.a - max(0.0, light.r*0.5-0.5))*rain;
			raincolor.rgb = mix(raincolor.rgb, FOG_COLOR.rgb, raincolor.a);
			raincolor.a = max(0.0, raincolor.a - max(0.0, 0.8 - light.r*0.5));
		}
#endif



#ifndef NO_TEXTURE
#if !defined(TEXEL_AA) || !defined(TEXEL_AA_FEATURE)
	color = texture2D( TEXTURE_0, uv );
#else
	color = texture2D_AA(TEXTURE_0, uv);
#endif // !defined(TEXEL_AA) || !defined(TEXEL_AA_FEATURE)

#ifdef ALPHA_TEST
	if(NEEDS_DISCARD(color))
		discard;
#endif // ALPHA_TEST

#ifdef TINTED_ALPHA_TEST
vec4 testColor = color;
testColor.a *= alphaTestMultiplier;
	if(NEEDS_DISCARD(testColor))
		discard;
#endif // TINTED_ALPHA_TEST
#endif // NO_TEXTURE

#ifdef USE_COLOR_MASK
	color.rgb = mix(color.rgb, color.rgb*changeColor.rgb, color.a);
	color.a *= changeColor.a;
#endif

#ifdef ITEM_IN_HAND
	color.rgb = mix(color.rgb, color.rgb*changeColor.rgb, light.a);
#endif

#ifdef USE_MULTITEXTURE
	vec4 tex1 = texture2D( TEXTURE_1, uv );
	vec4 tex2 = texture2D( TEXTURE_2, uv );
	color.rgb = mix(color.rgb, tex1.rgb, tex1.a);
#ifdef COLOR_SECOND_TEXTURE
	if (tex2.a > 0.0) {
		color.rgb = tex2.rgb + (tex2.rgb * changeColor.rgb - tex2.rgb)*tex2.a;//lerp(tex2.rgb, tex2 * changeColor.rgb, tex2.a)
	}
#else
	color.rgb = mix(color.rgb, tex2.rgb, tex2.a);
#endif
#endif

#ifdef USE_OVERLAY
	//use either the diffuse or the OVERLAY_COLOR
	color.rgb = mix(color, overlayColor, overlayColor.a).rgb;
#endif

#ifdef USE_EMISSIVE
	//make glowy stuff
	color *= mix(vec4(1.0), light, color.a );
#else
	color *= light;
#endif

	//apply fog
	color.rgb = mix( color.rgb, fogColor.rgb, fogColor.a );

#ifdef GLINT
	// Applies color mask to glint texture instead and blends with original color
	vec4 layer1 = texture2D(TEXTURE_1, fract(layer1UV)).rgbr * glintColor;
	vec4 layer2 = texture2D(TEXTURE_1, fract(layer2UV)).rgbr * glintColor;
	vec4 glint = (layer1 + layer2) * tileLightColor;

	color = glintBlend(color, glint);
#endif

float shE = mix(0.0, 1.0, max(0.0, 1.0 - (light.r - 0.5)*3.0));

//sunlight
#ifdef SUN_LIGHT
	float isl_f= 1.0-(color.r+color.g+color.b)/3.0;
	vec4 isl_v =vec4(1.0+isl_f,0.9+isl_f,0.8+isl_f,1.0);
	
	#ifdef SHADOW
		isl_v.rgb *= 1.0-shE*1.1;
	#endif
	
	#ifdef FOG	//reduce it in Fog, otherwise the Fog will be light white
		isl_v *= max(0.0, 1.0 - min(1.0, max(0.0, fogColor.a - 0.7) * 0.5));
	#endif
	isl_v.rgb = max(vec3(1.0),isl_v.rgb);

	color.rgb *= isl_v.rgb;
#else
	#ifdef SHADOW
		color.rgb = mix(color.rgb, color.rgb*0.5, shE);
	#endif
#endif

//Sunlight Part 2
#ifdef COLOR_MAP
	color = EnergyColorMap(color);
#endif

#ifdef RAIN_EFFECT
	if(rain > 0.0){
		color.rgb = mix(color.rgb, raincolor.rgb, raincolor.a);
	}
#endif
	
	gl_FragColor = color;
}
