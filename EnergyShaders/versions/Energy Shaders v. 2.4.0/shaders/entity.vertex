// __multiversion__
// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.

// To use centroid sampling we need to have version 300 es shaders, which requires changing:
// attribute to in
// varying to out when in vertex shaders or in when in fragment shaders
// defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
// texture2D to texture
#if __VERSION__ >= 300

#define attribute in
#define varying out
#ifdef MSAA_FRAMEBUFFER_ENABLED
#define _centroid centroid
#else
#define _centroid
#endif
_centroid out vec2 uv;

#else
varying vec2 uv;
#endif

uniform MAT4 WORLDVIEWPROJ;
uniform MAT4 WORLD;
uniform vec4 TILE_LIGHT_COLOR;
uniform vec4 OVERLAY_COLOR;
uniform vec4 CHANGE_COLOR;
uniform vec4 GLINT_COLOR;
uniform vec4 FOG_COLOR;
uniform vec2 FOG_CONTROL;
uniform int FOG_MODE;
uniform float RENDER_DISTANCE;
uniform vec4 UV_ANIM;
uniform vec2 UV_OFFSET;
uniform vec2 UV_ROTATION;
uniform vec2 GLINT_UV_SCALE;
uniform highp float TIME;

attribute mediump vec4 POSITION;
attribute vec2 TEXCOORD_0;
attribute vec4 NORMAL;

#ifdef COLOR_BASED
	attribute vec4 COLOR;
#endif

varying vec4 light;
varying vec4 fogColor;
varying POS3 posE;

#ifdef USE_OVERLAY
varying vec4 overlayColor;
#endif

#ifdef TINTED_ALPHA_TEST
varying float alphaTestMultiplier;
#endif

#if defined(USE_COLOR_MASK) || defined(ITEM_IN_HAND) || defined(COLOR_SECOND_TEXTURE)
varying vec4 changeColor;
#endif

#ifdef GLINT
	varying vec2 layer1UV;
	varying vec2 layer2UV;
    varying vec4 tileLightColor;
	varying vec4 glintColor;
#endif

const float AMBIENT = 0.45;

const float XFAC = -0.1;
const float ZFAC = 0.1;

float lightIntensity() {
#ifdef FANCY
    vec3 N = normalize( WORLD * NORMAL ).xyz;

    N.y *= TILE_LIGHT_COLOR.w; //TILE_LIGHT_COLOR.w contains the direction of the light

    //take care of double sided polygons on materials without culling
#ifdef FLIP_BACKFACES
    vec3 viewDir = normalize((WORLD * POSITION).xyz);
    if( dot(N, viewDir) > 0.0 )
        N *= -1.0;
#endif

    float yLight = (1.0+N.y) * 0.5;
    return yLight * (1.0-AMBIENT) + N.x*N.x * XFAC + N.z*N.z * ZFAC + AMBIENT;
#else
    return 1.0;
#endif
}

#ifdef GLINT
vec2 calculateLayerUV(float offset, float rotation) {
	vec2 uv = TEXCOORD_0;
	uv -= 0.5;
	float rsin = sin(rotation);
	float rcos = cos(rotation);
	uv = mat2(rcos, -rsin, rsin, rcos) * uv;
	uv.x += offset;
	uv += 0.5;

	return uv * GLINT_UV_SCALE;
}
#endif


/*========================SETTINGS========================*/
/* You can Edit this to change the look of Energy Shaders */
/*        Energy Shaders is created by Pro Coder          */
/*========================SETTINGS========================*/


//#define MOJANG_FOG


//All of this down only works, if ENERGY FOG is activated!
#define ENERGY_FOG
#define FOG_COLOR_E vec3(-0.1, -0.1, 0.1)
#define MIX_FOG_WITH_REAL_FOG	//recommend
#define FOG_STRENGTH 0.8;

#define ENERGY_UNDER_WATER_FOG	
#define UNDER_WATER_FOG_COLOR_E vec3(0.15, 0.4, 0.8)

#define UNDER_WATER_WAVES


/*=====================STOP=====================*/
/* Stop here your Editing without permission of */
/*                   Pro Coder                  */
/*    Energy Shaders is created by Pro Coder    */
/*=====================STOP=====================*/









void main()
{
    POS4 pos = WORLDVIEWPROJ * POSITION;
    gl_Position = pos;
    
    posE = POSITION.xyz;

    float L = lightIntensity();

	float uw = 0.0;		//change it to 1.0, when underwater
	vec4 waves = vec4(0.0);
	
//ESPE clalculation

	if(FOG_CONTROL.x < 0.05){
		uw = 1.0;
	}

//Mojang
#ifdef USE_OVERLAY
	L += OVERLAY_COLOR.a * 0.35;
    overlayColor = OVERLAY_COLOR;
#endif

#ifdef TINTED_ALPHA_TEST
    alphaTestMultiplier = OVERLAY_COLOR.a;
#endif

#if defined(USE_COLOR_MASK) || defined(ITEM_IN_HAND) || defined(COLOR_SECOND_TEXTURE)
    changeColor = CHANGE_COLOR;
#endif

    light = vec4(vec3(L) * TILE_LIGHT_COLOR.xyz, 1.0);

#ifdef COLOR_BASED
	light *= COLOR;
#endif
    
#ifndef NO_TEXTURE
    uv = TEXCOORD_0;
#endif

#ifdef USE_UV_ANIM
	uv.xy = UV_ANIM.xy + (uv.xy * UV_ANIM.zw);
#endif

#ifdef GLINT
	glintColor = GLINT_COLOR;
	layer1UV = calculateLayerUV(UV_OFFSET.x, UV_ROTATION.x);
	layer2UV = calculateLayerUV(UV_OFFSET.y, UV_ROTATION.y);
    tileLightColor = TILE_LIGHT_COLOR;
#endif


//fog
	#ifdef MOJANG_FOG
 fogColor.rgb = FOG_COLOR.rgb;
	fogColor.a = clamp(((pos.z / RENDER_DISTANCE) - FOG_CONTROL.x) / (FOG_CONTROL.y - FOG_CONTROL.x), 0.0, 1.0);
	#endif
	
	#ifdef ENERGY_FOG
		float fogdis = length(-POSITION.xyz)/(RENDER_DISTANCE*0.75);
    
		fogColor.a = min(1.0, max(0.0,fogdis-(0.7))) * FOG_STRENGTH;
		fogColor.rgb = FOG_COLOR.rgb + FOG_COLOR_E;
		
		#ifdef MIX_FOG_WITH_REAL_FOG
			fogColor = mix(fogColor, vec4(FOG_COLOR.rgb, 1.0), min(1.0, max(0.0, (fogColor.a - 0.5)*5.0)));
		#endif
		//fogColor.a *= fogColor.a;
		
		if(uw == 1.0){
				#ifdef ENERGY_UNDER_WATER_FOG
					fogdis = length(-POSITION.xyz);
			
					fogColor.a = max(0.3, min(1.0, fogdis * 0.01));
					fogColor.rgb = UNDER_WATER_FOG_COLOR_E;
					
					#ifdef UNDER_WATER_WAVES
						float WScale = 2.0 - min(1.9, fogdis*0.1);//min(1.0, 1.0 - fogdis * 0.5);
						waves.x = sin(POSITION.x * WScale + TIME * 0.5) * sin(POSITION.z * WScale + TIME * 0.5) * max(0.0, fogdis - 3.0)*0.1;
						waves.z = waves.x;
					#endif
				#endif
		}
	#endif
	
	pos = WORLDVIEWPROJ * (POSITION + waves);
    gl_Position = pos;
	
	
}