// __multiversion__

#if __VERSION__ >= 300

	// version 300 code

	#ifdef MSAA_FRAMEBUFFER_ENABLED
		#define _centroid centroid
	#else
		#define _centroid
	#endif

	#ifndef BYPASS_PIXEL_SHADER
		#if defined(TEXEL_AA) && defined(TEXEL_AA_FEATURE)
			_centroid in highp vec2 uv0;
			_centroid in highp vec2 uv1;
		#else
			_centroid in vec2 uv0;
			_centroid in vec2 uv1;
		#endif
	#endif

	#define varying in
	#define texture2D texture
	out vec4 FragColor;
	#define gl_FragColor FragColor
#else

	// version 100 code

	#ifndef BYPASS_PIXEL_SHADER
		varying vec2 uv0;
		varying vec2 uv1;
	#endif
#endif



varying vec4 color;
varying POS3 posE;
varying POS3 screen_pos;

#ifdef FOG
varying vec4 fogColor;
#endif

#ifdef NEAR_WATER
varying float cameraDist;
#endif

#include "shaders/util.h"

uniform sampler2D TEXTURE_0;
uniform sampler2D TEXTURE_1;
uniform sampler2D TEXTURE_2;

uniform vec4 FOG_COLOR;
uniform vec2 FOG_CONTROL;
uniform float RENDER_DISTANCE;
uniform highp float TIME;
uniform POS3 VIEW_POS;
uniform float FAR_CHUNKS_DISTANCE;

/*========================SETTINGS========================*/
/* You can Edit this to change the look of Energy Shaders */
/*        Energy Shaders is created by Pro Coder          */
/*========================SETTINGS========================*/

#define TORCH_LIGHT
#define TORCH_LIGHT_COLOR vec3(0.5,0.45,0.05)

#define SHADOW
#define SHADOW_WIDTH_E 0.87
#define SHADOW_FADE_IN
#define FADE_IN_SHADOW_WIDTH_E vec2(0.025, 1.0 / 0.025)

#define SUN_LIGHT
#define COLOR_MAP

#define CAVE_FOG
#define CAVE_FOG_COLOR vec3(0.32, 0.35, 0.55)

#define RAIN_EFFECT
#define RAIN_COLOR vec4(0.441,0.46,0.484, 0.0)

#define REFLECTION
#define WATER_COLOR vec3(0.1, 0.25, 0.5)	//Only If REFLECTION is defined!
#define SKY_COLOR 0.1, 0.35, 0.7
#define SKY_HEIGH 270.0

/*=====================STOP=====================*/
/* Stop here your Editing without permission of */
/*                   Pro Coder                  */
/*    Energy Shaders is created by Pro Coder    */
/*=====================STOP=====================*/

vec4 EnergyColorMap(vec4 c){
	float R,G,B;

	R = c.r;
	G = c.g;
	B = c.b;

	R = mix(R,R * 1.5, max(0.0, R - (G + B)));
	G = mix(G,G * 1.5, max(0.0, G - (R + B)));
	B = mix(B,B * 1.5, max(0.0, B - (G + R)));

	return vec4(R, G, B, c.a);
}

/*=====================STOP=====================*/
/* Stop here your Editing without permission of */
/*                   Pro Coder                  */
/*    Energy Shaders is created by Pro Coder    */
/*=====================STOP=====================*/

#ifndef BYPASS_PIXEL_SHADER

float ispointnear(vec2 Np, vec2 p, float rd){

	vec2 toNull = vec2(0.0) - p;

	Np -= toNull;

	float s = max(0.0, clamp(rd - length(Np),0.0,1.0)-0.3);
	return s*s*s*s*10000.0;
}

//Function by Will!
vec2 ran(vec2 p){
  p = fract(p * vec2(443.897, 441.423));
  p += dot(p, p.yx + 19.19);
  return fract((p.xx + p.yx)*p.xy) * 5.0 - 1.0;
}

vec3 worldPosToCloudPos(POS3 CamPos, POS3 p, float YOffset, float sky_height){
	float YtoCamY = abs(CamPos.y - p.y);

	if(p.y <= 0.0){
		p.y = min(-3.0, p.y);
	}

	vec3 NToCloud = normalize(reflect(p + vec3(0.0, YOffset, 0.0) , normalize(CamPos)));

	//Expand factor
	float Expandfactor = sky_height / NToCloud.y;

	//It is now it the heigh of the clouds, and it would be the right refletion, but the sky position doesn't equals the worldPos, so it is still not real :/
	vec3 UnrealCloudPos = NToCloud * Expandfactor;


	return (UnrealCloudPos / RENDER_DISTANCE) / 30.0;
}

float wave1(vec2 p, float f1, float f2, float t){

	float w1 = (sin(p.x*f1 + t) * sin(p.y*f2 + t));

	w1 = w1 - max(0.0, w1-0.8)*4.0;

	return w1;
}

float getRain(){
  return min(1.0, max(0.0, 1.0-pow(FOG_CONTROL.y,5.0))*2.0);
}

highp float  unrealPos(highp float x, highp float z, float fact){
  highp float factor = length(vec2(x, z));

  return fact - factor*15.0;
}

float clacCodeBasedNoiseTexture(vec2 a){
  float ca = sin(a.x + TIME*0.1 + a.y - a.x + sin(a.x+TIME*0.1) + cos(a.y + a.y - a.x));
  float cc = sin(a.x+(cos(a.y)*0.1));
  float cd = 0.0;

  return ca*1.5/*-cb*/*cc;
}

float clacCodeBasedSmallNoiseTexture(vec2 a){
  float ca = sin(a.x + a.y - a.x + sin(a.x) + cos(a.y + a.y - a.x)) - sin(a.x + a.x - a.y *sin(a.y) - a.y)+sin((cos(a.x)+cos(a.y))*sin(a.x+a.y));


  return ca;
}



vec4 CloudColor(float a, vec3 fog){
  vec3 cloudColor = vec3(1.5);

  cloudColor *= fog*2.0;

  cloudColor = mix(cloudColor, FOG_COLOR.rgb*1.2, 0.5);


  cloudColor *= mix(vec3(1.0) , vec3(0.25, 0.3, 0.3), getRain());
  a += 0.3*getRain();


  cloudColor = min(vec3(1.0), cloudColor);

  return vec4(cloudColor, min(0.95, a));
}

vec4 calcClouds(POS3 pos){
	vec4 cloud = vec4(0.0);

	highp float x = pos.x;
highp float z = pos.z;


cloud.a = unrealPos(x ,z, 6.0);

x *= 2.0 * (cloud.a*4.0);
z *= 2.0 * (cloud.a*4.0);

z += TIME * 0.05;
x += TIME * 0.001;

cloud.a = max(0.0, sin(x - cos(z*2.0)));
cloud.a = clacCodeBasedNoiseTexture(vec2(x, z));
cloud.a = (mix(clacCodeBasedNoiseTexture((vec2(x, z*0.7))*5.0), cloud.a, cloud.a)*max(0.0, cloud.a))*2.0;
cloud.a *= 0.2;
cloud.a -= cloud.a * 0.2 * cloud.a;
cloud.a *= max(0.0, min(1.0, unrealPos(pos.x, pos.z, 4.0)));



cloud = CloudColor(cloud.a, FOG_COLOR.rgb);

//active this for sun reflection
//cloud.a += ispointnear(pos.xz, vec2(0.0,0.1), 0.4)*10.0;


	return cloud;
}

vec4 AllReflections(POS3 CamPos, POS3 p, float sky_height, vec3 sky_color, float YO){

	vec3 AllR = sky_color;

	POS3 CloudPos = worldPosToCloudPos(vec3(0.0, 1.75, 0.0), p, YO, sky_height);
	vec4 cloudReflection = calcClouds(CloudPos);

	highp float dis = length(CloudPos.xz);
	vec3 HSky_color = mix(sky_color, FOG_COLOR.rgb, clamp(dis*1.3, 0.0, 1.0));

	AllR = mix(HSky_color, cloudReflection.rgb, max(0.0, min(1.0, (cloudReflection.a*1.3)*0.2)));

	//cloudReflection.a = max(0.0, cloudReflection.a - max(0.0, 10.0 - length(p.xz)));

	return vec4(AllR, cloudReflection.a);
}

vec4 waterColor(vec4 Reflection, float a, vec3 waterColor, float YO){
	vec4 wC = vec4(mix(waterColor, Reflection.rgb, min(1.0, max(0.0, a + Reflection.a - 0.35-YO)) - (1.0 - uv1.y*1.2)), a);
	return wC;
}

/*=====================STOP=====================*/
/* Stop here your Editing without permission of */
/*                   Pro Coder                  */
/*    Energy Shaders is created by Pro Coder    */
/*=====================STOP=====================*/

/*=====================STOP=====================*/
/* Stop here your Editing without permission of */
/*                   Pro Coder                  */
/*    Energy Shaders is created by Pro Coder    */
/*=====================STOP=====================*/

// random/hash function
highp float hash( float n )
{
  return fract(cos(n)*41415.92653);
}

// 3d noise function
highp float noise( POS3 x )
{
  POS3 p  = floor(x);
  POS3 f  = smoothstep(0.0, 1.0, fract(x));
  highp float n = p.x + p.y*57.0 + 113.0*p.z;

  return mix(mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),
    mix( hash(n+ 57.0), hash(n+ 58.0),f.x),f.y),
    mix(mix( hash(n+113.0), hash(n+114.0),f.x),
    mix( hash(n+170.0), hash(n+171.0),f.x),f.y),f.z);
}

highp float refE(float fac, POS3 p, highp float t){
		vec3 tt = vec3(t);
		highp float a = noise(p * (fac) + tt) - noise(p * (fac-0.5)-tt) + noise(-p * (fac+1.0)+tt);

		return a;
}



#endif

/*=====================STOP=====================*/
/* Stop here your Editing without permission of */
/*                   Pro Coder                  */
/*    Energy Shaders is created by Pro Coder    */
/*=====================STOP=====================*/



void main()
{
#ifdef BYPASS_PIXEL_SHADER
	gl_FragColor = vec4(0, 0, 0, 0);
	return;
#else


	//ESPE Variables:

	float nether = 0.0; 		//change it to 1.0, when in nether
	float uw = 0.0;				//change it to 1.0, when underwater

	float Red = 0.0;			//calculate later
	vec3 torchl = TORCH_LIGHT_COLOR;	//Set it to the defined TORCH_LIGHT_COLOR	TODO: Maybe add #ifdef TORCH_LIGHT here later, I don`t do this right now, so there won`t be any bugs for sure

	bool water = false;
	POS3 RposE = posE.xyz + VIEW_POS.xyz;

	#ifdef SHADOW
		float shE = 0.0;		//Shadow amount, clalculate later
	#endif
	#ifdef SHADOW_FADE_IN
		float fadeInE = 0.0;	//Shadow fade in, clalculate later
	#endif

	POS3 fposE = posE.xyz + VIEW_POS.xyz;	//Fix position, for waves, etc.

	#ifdef RAIN_EFFECT
		vec4 raincolor = RAIN_COLOR;
		float rain = min(1.0, max(0.0, 1.0-pow(FOG_CONTROL.y,5.0))*2.0);	//For the rain, use FOG_CONTROL.y, because it is much smoother
		if(rain > 0.0){
			raincolor.a = min(1.0,length(posE.xz)/RENDER_DISTANCE);
			raincolor.a = min(1.0, raincolor.a + 0.3);
			raincolor.a = max(0.0, raincolor.a - max(0.0, uv1.x-0.5))*rain;
			raincolor.rgb = mix(raincolor.rgb, FOG_COLOR.rgb, raincolor.a);
			raincolor.a = max(0.0, raincolor.a - max(0.0, 0.8 - uv1.y));
		}
	#endif



	//ESPE clalculation

	if(FOG_COLOR.r < 0.25 && FOG_COLOR.b<0.25 && ((FOG_CONTROL.x < 0.55 && FOG_CONTROL.x > 0.1)) && FOG_COLOR.r > 0.1 && FOG_COLOR.r > FOG_COLOR.b && uv1.y == 0.0){
		nether = 1.0;
	}
	if(FOG_CONTROL.x < 0.05){
		uw = 1.0;
	}

	//Far Water fix
if(fract(RposE.y) < 0.1 && fract(RposE.y) >= 0.0 && color.r < 0.85 && color.b > color.g){
	#ifdef FOG
		water = true;
	#endif
}

#ifdef NEAR_WATER
	water = true;
#endif


	//Mojang stuff
#if !defined(TEXEL_AA) || !defined(TEXEL_AA_FEATURE)
	vec4 diffuse = texture2D( TEXTURE_0, uv0 );
#else
	vec4 diffuse = texture2D_AA(TEXTURE_0, uv0 );
#endif

	vec4 inColor = color;

#ifdef SEASONS_FAR
	diffuse.a = 1.0;
	inColor.b = 1.0;
#endif

#ifdef ALPHA_TEST
	#ifdef ALPHA_TO_COVERAGE
		float alphaThreshold = .05;
	#else
		float alphaThreshold = .5;
	#endif
	if(diffuse.a < alphaThreshold)
		discard;
#endif

	diffuse = diffuse * texture2D( TEXTURE_1, uv1 );

#ifndef SEASONS

#if !defined(ALPHA_TEST) && !defined(BLEND)
	diffuse.a = inColor.a;
#elif defined(BLEND)
	diffuse.a *= inColor.a;
	#ifdef NEAR_WATER
		float alphaFadeOut = clamp(cameraDist, 0.0, 1.0);
		diffuse.a = mix(diffuse.a, 1.0, alphaFadeOut);
	#endif
#endif

	diffuse.rgb *= inColor.rgb;
#else
	vec2 uv = inColor.xy;
	diffuse.rgb *= mix(vec3(1.0,1.0,1.0), texture2D( TEXTURE_2, uv).rgb*2.0, inColor.b);
	diffuse.rgb *= inColor.aaa;
	diffuse.a = 1.0;
#endif


//Mostly ESPE Stuff

//Active Fog!
#ifdef FOG
	//there will be another Fog in the nether
	if(nether == 0.0){
		diffuse.rgb = mix( diffuse.rgb, fogColor.rgb, fogColor.a);
	}
#endif

//clalculate somthing for the torchl
Red = max(0.0,1.0-diffuse.r);
torchl.r += Red;

//Calculate the Shadows
#ifdef SHADOW
	if(uv1.y <= SHADOW_WIDTH_E){	//if were are rendering in shadow
		shE = 1.0;
		if(uv1.y >= SHADOW_WIDTH_E-FADE_IN_SHADOW_WIDTH_E.x){
			#ifdef SHADOW_FADE_IN
				fadeInE = (uv1.y - (SHADOW_WIDTH_E-FADE_IN_SHADOW_WIDTH_E.x))*FADE_IN_SHADOW_WIDTH_E.y;	//calculate fade in
				shE = mix(1.0,0.0,fadeInE);
			#else
				shE = 1.0;
			#endif
		}
		shE = max(0.0, shE - max(0.0, uv1.x-0.5)*5.0);
	}
#endif

//Reduce Shadow in Fog very fast, becuase it looks rlly awful in Fog!
#if defined(FOG) && defined(SHADOW)
	shE = max(0.0, shE-fogColor.a * 5.0);
#endif


if(water){
	#ifdef REFLECTION

		float rscale = 0.15;
		float refrac = wave1(posE.xy + vec2(0.5, 0.9) * 1.5 * rscale, 0.7, 1.8, -TIME*1.2) *  wave1(posE.xz * 0.5 * rscale, 1.12, 1.3, TIME*1.3)*wave1(posE.zx * 0.9 * rscale, 1.62, 0.5, TIME*1.6);

		refrac = refE(3.0, fposE, TIME) + refE(2.5, fposE+vec3(1.5, 1.0, 1.5), -TIME*0.8) + refE(3.0, -fposE, TIME) - refE(3.5, -fposE+vec3(10.5, 1.0, 1.5), TIME*0.7);
		//refrac += refE(2.0, fposE, TIME) + refE(5.5, fposE+vec3(0.5, 1.0, 1.5), -TIME*0.8) + refE(2.4, -fposE, TIME) + refE(3.5, -fposE+vec3(10.5, 1.0, 1.5), TIME*0.7);

		diffuse = waterColor(AllReflections(vec3(0.0, 1.75, 0.0), posE.xyz, 200.0,  vec3(0.1, 0.35, 0.7), refrac*5.0), clamp((length(posE.xyz) / RENDER_DISTANCE)*4.5, 0.5, 1.0), WATER_COLOR, refrac*0.0);
	#else
		diffuse = mix(vec4(0.2, 0.3, 0.7, 0.3), vec4(0.2, 0.5, 0.6, 0.7), color.a);
	#endif

	#ifdef FOG
		if(uw == 1.0){
	  diffuse.rgb = WATER_COLOR;
		}
	#endif
}

//sunlight
#ifdef SUN_LIGHT
	float isl_f= 1.0-(diffuse.r+diffuse.g+diffuse.b)/3.0;
	vec4 isl_v =vec4(1.0+isl_f,0.9+isl_f,0.8+isl_f,1.0);

	#ifdef SHADOW
		isl_v.rgb *= 1.0-shE*1.1;
	#endif

	#ifdef FOG	//reduce it in Fog, otherwise the Fog will be light white
		isl_v *= max(0.0, 1.0 - min(1.0, max(0.0, fogColor.a - 0.7) * 0.5));
	#endif
	isl_v.rgb = max(vec3(1.0),isl_v.rgb);

	diffuse.rgb *= isl_v.rgb;
#else
	#ifdef SHADOW
		diffuse.rgb = mix(diffuse.rgb, diffuse.rgb*0.5, shE);
	#endif
#endif

//Cave Fog
#ifdef CAVE_FOG
	vec4 ug = vec4(1.0);
	ug.a = min(1.0, max(0.0, (uv1.y * 1.3) + max(0.0, uv1.x - 0.5) + 0.7));
	ug.rgb = CAVE_FOG_COLOR;
#endif

if(uw == 0.0){
	#ifdef CAVE_FOG
		diffuse.rgb = mix(ug.rgb,diffuse.rgb,ug.a);
	#endif
}

//Torch light
#ifdef TORCH_LIGHT
	diffuse.rgb += torchl*max(0.0,uv1.x-0.5);
#endif

//TODO: Add the Night Color here later
//TODO: ADD here Blur later, if I am going to add it for the Settings!

//Rain effect
#ifdef RAIN_EFFECT
	diffuse.rgb = mix(diffuse.rgb, raincolor.rgb, raincolor.a);
#endif

//Sunlight Part 2
#ifdef COLOR_MAP
	diffuse = EnergyColorMap(diffuse);
#endif

gl_FragColor = diffuse;

#endif // BYPASS_PIXEL_SHADER
}
