// __multiversion__
// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.

// To use centroid sampling we need to have version 300 es shaders, which requires changing:
// attribute to in
// varying to out when in vertex shaders or in when in fragment shaders
// defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
// texture2D to texture
#if __VERSION__ >= 300
	#define attribute in
	#define varying out

	#ifdef MSAA_FRAMEBUFFER_ENABLED
		#define _centroid centroid
	#else
		#define _centroid
	#endif

	#ifndef BYPASS_PIXEL_SHADER
		_centroid out vec2 uv0;
		_centroid out vec2 uv1;
	#endif
#else
	#ifndef BYPASS_PIXEL_SHADER
		varying vec2 uv0;
		varying vec2 uv1;
	#endif
#endif

#ifndef BYPASS_PIXEL_SHADER
	varying vec4 color;
	varying POS3 posE;
	varying POS3 screen_pos;
#endif

#ifdef FOG
	varying vec4 fogColor;
#endif

#ifdef NEAR_WATER
	varying float cameraDist;
#endif

#ifdef AS_ENTITY_RENDERER
	uniform MAT4 WORLDVIEWPROJ;
#else
	uniform MAT4 WORLDVIEW;
	uniform MAT4 PROJ;
#endif
uniform vec4 FOG_COLOR;
uniform vec2 FOG_CONTROL;
uniform float RENDER_DISTANCE;
uniform vec2 VIEWPORT_DIMENSION;
uniform vec4 CURRENT_COLOR;		//current color r contains the offset to apply to the fog for the "fade in"
uniform POS4 CHUNK_ORIGIN_AND_SCALE;
uniform POS3 VIEW_POS;
uniform float FAR_CHUNKS_DISTANCE;

uniform highp float TIME;

attribute POS4 POSITION;
attribute vec4 COLOR;
attribute vec2 TEXCOORD_0;
attribute vec2 TEXCOORD_1;

const float rA = 1.0;
const float rB = 1.0;
const vec3 UNIT_Y = vec3(0,1,0);
const float DIST_DESATURATION = 56.0 / 255.0; //WARNING this value is also hardcoded in the water color, don'tchange


/*========================SETTINGS========================*/
/* You can Edit this to change the look of Energy Shaders */
/*        Energy Shaders is created by Pro Coder          */
/*========================SETTINGS========================*/

//#define MOJANG_FOG


//All of this down only works, if ENERGY FOG is activated!
#define ENRGY_FOG
#define FOG_COLOR_E vec3(-0.1, -0.1, 0.1)
#define MIX_FOG_WITH_REAL_FOG	//recommend
#define FOG_STRENGTH 0.8;

#define ENRGY_UNDER_WATER_FOG	
#define UNDER_WATER_FOG_COLOR_E vec3(0.15, 0.4, 0.8)

#define UNDER_WATER_WAVES


//#define DO_NOT_ACTIVE

/*=====================STOP=====================*/
/* Stop here your Editing without permission of */
/*                   Pro Coder                  */
/*    Energy Shaders is created by Pro Coder    */
/*=====================STOP=====================*/



void main()
{
    POS4 worldPos;
#ifdef AS_ENTITY_RENDERER
		POS4 pos = WORLDVIEWPROJ * POSITION;
		worldPos = pos;
#else
    worldPos.xyz = (POSITION.xyz * CHUNK_ORIGIN_AND_SCALE.w) + CHUNK_ORIGIN_AND_SCALE.xyz;
    worldPos.w = 1.0;

    // Transform to view space before projection instead of all at once to avoid floating point errors
    // Not required for entities because they are already offset by camera translation before rendering
    // World position here is calculated above and can get huge
    POS4 pos = WORLDVIEW * worldPos;
    pos = PROJ * pos;
#endif

//ESPE Variables

	float uw = 0.0;		//change it to 1.0, when underwater
	vec3 waves = vec3(0.0);
	
//ESPE clalculation

	if(FOG_CONTROL.x < 0.05){
		uw = 1.0;
	}

#ifndef BYPASS_PIXEL_SHADER
    uv0 = TEXCOORD_0;
    uv1 = TEXCOORD_1;
	color = COLOR;
#endif

///// find distance from the camera

#if defined(FOG) || defined(NEAR_WATER)
	#ifdef FANCY
		vec3 relPos = -worldPos.xyz;
		float cameraDepth = length(relPos);
		#ifdef NEAR_WATER
			cameraDist = cameraDepth / FAR_CHUNKS_DISTANCE;
		#endif
	#else
		float cameraDepth = pos.z;
		#ifdef NEAR_WATER
			vec3 relPos = -worldPos.xyz;
			float camDist = length(relPos);
			cameraDist = camDist / FAR_CHUNKS_DISTANCE;
		#endif
	#endif
#endif

///// apply fog

#ifdef FOG
	#ifdef MOJANG_FOG
		float len = cameraDepth / RENDER_DISTANCE;
		#ifdef ALLOW_FADE
			len += CURRENT_COLOR.r;
		#endif

		fogColor.rgb = FOG_COLOR.rgb;
		fogColor.a = clamp((len - FOG_CONTROL.x) / (FOG_CONTROL.y - FOG_CONTROL.x), 0.0, 1.0);
	#endif
	#ifdef ENRGY_FOG
		float fogdis = length(-worldPos.xyz)/(RENDER_DISTANCE*0.75);
    
		fogColor.a = min(1.0, max(0.0,fogdis-(0.7))) * FOG_STRENGTH;
		fogColor.rgb = FOG_COLOR.rgb + FOG_COLOR_E;
		
		#ifdef MIX_FOG_WITH_REAL_FOG
			fogColor = mix(fogColor, vec4(FOG_COLOR.rgb, 1.0), min(1.0, max(0.0, (fogColor.a - 0.5)*5.0)));
		#endif
		//fogColor.a *= fogColor.a;
		
		if(uw == 1.0){
			#ifndef NEAR_WATER
				#ifdef ENRGY_UNDER_WATER_FOG
					fogdis = length(-worldPos.xyz);
			
					fogColor.a = max(0.3, min(1.0, fogdis * 0.01));
					fogColor.rgb = UNDER_WATER_FOG_COLOR_E;
					
					#ifdef UNDER_WATER_WAVES
						float WScale = 2.0 - min(1.9, fogdis*0.1);//min(1.0, 1.0 - fogdis * 0.5);
						waves.x = sin(worldPos.x * WScale + TIME * 0.5) * sin(worldPos.z * WScale + TIME * 0.5) * max(0.0, fogdis - 3.0)*0.1;
						waves.z = waves.x;
					#endif
				#endif
			#endif
		}
	#endif
#endif

///// water magic
#ifdef NEAR_WATER
	#ifdef FANCY  /////enhance water
		float F = dot(normalize(relPos), UNIT_Y);
		F = 1.0 - max(F, 0.1);
		// Nvidia Tegra 2 and Xoom (maybe the combination) have some bug where "min" returns a highp float
		// in some cases even though the input are lowp floats. This together with the devices/drivers
		// inability to figure out what to do with that causes it to fail due to an ambiguous call to mix.
		F = 1.0 - mix(F*F*F*F, 1.0, float(min(1.0, cameraDepth / FAR_CHUNKS_DISTANCE)));

		color.rg -= vec2(F * DIST_DESATURATION);

		vec4 depthColor = vec4(color.rgb * 0.5, 1.0);
		vec4 traspColor = vec4(color.rgb * 0.45, 0.8);
		vec4 surfColor = vec4(color.rgb, 1.0);

		vec4 nearColor = mix(traspColor, depthColor, color.a);
		color = mix(surfColor, nearColor, F);
	#else
		// Completely insane, but if I don't have these two lines in here, the water doesn't render on a Nexus 6
		vec4 surfColor = vec4(color.rgb, 1.0);
		color = surfColor;
		color.a = pos.z / FAR_CHUNKS_DISTANCE + 0.5;
	#endif //FANCY
#endif

#ifndef BYPASS_PIXEL_SHADER
	posE = worldPos.xyz; //fragment position
	#ifndef AS_ENTITY_RENDERER
		worldPos.xyz += waves;
		
		pos = WORLDVIEW * worldPos;
		pos = PROJ * pos;
		
		screen_pos.xy = pos.xy / (pos.z + 1.0);
		screen_pos.z = pos.z;
		
		#ifdef DO_NOT_ACTIVE
			pos.z -= min(30.0, length(screen_pos.xy*0.5)*10.0);
		#endif
		
	#endif
#endif
gl_Position = pos;

}
