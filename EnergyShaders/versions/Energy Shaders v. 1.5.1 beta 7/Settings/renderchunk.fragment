// __multiversion__
// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.

// To use centroid sampling we need to have version 300 es shaders, which requires changing:
// attribute to in
// varying to out when in vertex shaders or in when in fragment shaders
// defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
// texture2D to texture
#if __VERSION__ >= 300

// version 300 code

#ifdef MSAA_FRAMEBUFFER_ENABLED
#define _centroid centroid
#else
#define _centroid
#endif

#if defined(TEXEL_AA) && defined(TEXEL_AA_FEATURE)
_centroid in highp vec2 uv0;
_centroid in highp vec2 uv1;
#else
_centroid in vec2 uv0;
_centroid in vec2 uv1;
#endif

#define varying in
#define texture2D texture
out vec4 FragColor;
#define gl_FragColor FragColor

#else

// version 100 code
varying vec2 uv0;
varying vec2 uv1;

#endif


varying vec4 color;
varying float farc;
varying vec3 waves;

#ifdef FOG
varying vec4 fogColor;
#endif

#ifdef NEAR_WATER
varying float cameraDist;
#endif

#include "shaders/util.h"

uniform sampler2D TEXTURE_0;
uniform sampler2D TEXTURE_1;
uniform sampler2D TEXTURE_2;




/*
================================
Energy Shaders made by Lini _!

with downloading, using , sharing or opening this ".zip" file you accept the terms of use.Take sure you read the terms of use before going about editing!

I hope you enjoy Energy Shaders!
================================
*/

//=//SETTINGS\\=\\


//=//SHADOWS

const float shadow = 1.0;
//const float night_s = 1.0;
const float swidth = 0.876;

//=//SHADOWS


//=//SUNLIGHT AND MOONLIGHT

const vec3 sunlight_width = vec3(1.4,1.2,1.2);
//const vec3 moonlight_width = vec3(1.0,1.0,1.0);

//=//SUNLIGHT AND MOONLIGHT


//=//REAL TORCH LIGHT ETC.

//const float real_light = 1.0;

//=//REAL TORCH LIGHT ETC.


//=//SETTINGS\\=\\

/*
================================
with going under this line you may break the terms of use!
================================
*/


void main()
{

float shadowon = 0.0;

#if !defined(TEXEL_AA) || !defined(TEXEL_AA_FEATURE)
	vec4 diffuse = texture2D( TEXTURE_0, uv0 );
#else
	vec4 diffuse = texture2D_AA(TEXTURE_0, uv0 );
#endif

	vec4 inColor = color;
	
#ifdef SEASONS_FAR
	diffuse.a = 1.0;
	inColor.b = 1.0;
#endif

#ifdef ALPHA_TEST
	#ifdef ALPHA_TO_COVERAGE
		float alphaThreshold = .05;
	#else
		float alphaThreshold = .5;
	#endif
	if(diffuse.a < alphaThreshold)
		discard;
#endif
	
	diffuse = diffuse * texture2D( TEXTURE_1, uv1 );

#ifndef SEASONS

#if !defined(ALPHA_TEST) && !defined(BLEND)
	diffuse.a = inColor.a;
#elif defined(BLEND)
	diffuse.a *= inColor.a;
	#ifdef NEAR_WATER
		float alphaFadeOut = clamp(cameraDist, 0.0, 1.0);
		diffuse.a = mix(diffuse.a, 1.0, alphaFadeOut);
	#endif
#endif	
	
	diffuse.rgb *= inColor.rgb;
#else
	vec2 uv = inColor.xy;
	diffuse.rgb *= mix(vec3(1.0,1.0,1.0), texture2D( TEXTURE_2, uv).rgb*2.0, inColor.b);
	diffuse.rgb *= inColor.aaa;
	diffuse.a = 1.0;
#endif

#ifdef FOG

vec3 EnColor = mix(fogColor.rgb,vec3(0.0,0.04,0.04), 0.6);
	diffuse.rgb = mix( diffuse.rgb, EnColor, fogColor.a );
#endif

vec4 plusdiffuse = vec4(0.0);

float nfarc = farc;
/*
if (nfarc >= 0.8){
nfarc = 0.8;
}
*/

plusdiffuse = vec4(0.6, 0.04, -0.25, 0.0)* pow(uv1.x *1.1+nfarc/5.0, 7.0);





//#ifdef FOG
	//plusdiffuse *= fogColor.a + 0.7;
//#endif

#ifdef NEAR_WATER
  if (waves.y > 0.03){
       plusdiffuse.rgb *= (waves.y-0.03) * 300.0;
   }
   else{
	     plusdiffuse *= 0.0;
   }
#endif

diffuse += plusdiffuse;

vec3 shadowe = vec3(0.0);

if (shadow == 1.0){
#ifndef NEAR_WATER
if (uv1.y <= swidth){
shadowe = vec3((diffuse.r + diffuse.g + diffuse.b)/10.0);
shadowon = 1.0;


if (uv1.y >= swidth-0.01){

float fade_shadow = (uv1.y - (swidth-0.01))*100.0;
shadowe = mix(shadowe,vec3(0.0,0.0,0.0),fade_shadow);
}


}
#endif
#ifdef NEAR_WATER
if (uv1.y <= swidth + 0.03){
shadowe = vec3((diffuse.r + diffuse.g + diffuse.b)/10.0);
shadowon = 1.0;
}
#endif
} 



diffuse.rgb = diffuse.rgb - shadowe;


gl_FragColor = diffuse;


	#ifndef FOG
		#ifndef NEAR_WATER
			gl_FragColor.rgb *= sunlight_width; 
		#endif
	#endif
	#ifdef NEAR_WATER
		gl_FragColor.rgb *= vec3(1.1,1.4,1.5);
	#endif
  #ifdef FOG
  vec3 newlightb = sunlight_width - vec3(fogColor.a);

  if(newlightb.r <= 1.0){
     newlightb.r = 1.0;
   }
 if(newlightb.g <= 1.0){
     newlightb.g = 1.0;
   }
 if(newlightb.b <= 1.0){
     newlightb.b = 1.0;
   }

  gl_FragColor.rgb *= newlightb;
  #endif
}
