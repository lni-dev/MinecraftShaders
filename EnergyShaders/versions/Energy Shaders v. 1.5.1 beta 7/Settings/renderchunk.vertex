// __multiversion__
// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.

// To use centroid sampling we need to have version 300 es shaders, which requires changing:
// attribute to in
// varying to out when in vertex shaders or in when in fragment shaders
// defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
// texture2D to texture
#if __VERSION__ >= 300
#define attribute in
#define varying out

#ifdef MSAA_FRAMEBUFFER_ENABLED
#define _centroid centroid
#else
#define _centroid
#endif

_centroid out vec2 uv0;
_centroid out vec2 uv1;

#else

varying vec2 uv0;
varying vec2 uv1;

#endif


varying vec4 color;
varying float farc;
varying vec3 waves;


#ifdef FOG
	varying vec4 fogColor;
#endif

#ifdef NEAR_WATER
	varying float cameraDist;
#endif

#ifdef AS_ENTITY_RENDERER
uniform MAT4 WORLDVIEWPROJ;
#else
uniform MAT4 WORLDVIEW;
uniform MAT4 PROJ;
#endif
uniform vec4 FOG_COLOR;
uniform vec2 FOG_CONTROL;
uniform float RENDER_DISTANCE;
uniform vec2 VIEWPORT_DIMENSION;
uniform vec4 CURRENT_COLOR;		//current color r contains the offset to apply to the fog for the "fade in"
uniform POS4 CHUNK_ORIGIN_AND_SCALE;
uniform POS3 VIEW_POS;
uniform float FAR_CHUNKS_DISTANCE;
uniform highp float TIME;

attribute POS4 POSITION;
attribute vec4 COLOR;
attribute vec2 TEXCOORD_0;
attribute vec2 TEXCOORD_1;

const float rA = 1.0;
const float rB = 1.0;
const vec3 UNIT_Y = vec3(0,1,0);
const float DIST_DESATURATION = 56.0 / 255.0; //WARNING this value is also hardcoded in the water color, don'tchange



/*
================================
Energy Shaders made by Lini _!

with downloading, using , sharing or opening this ".zip" file you accept the terms of use.Take sure you read the terms of use before going about editing!

I hope you enjoy Energy Shaders!
================================
*/

//=//SETTINGS\\=\\

// 1.0 = on and 0.0 = off
//some have also 2.0 for other or old thinks


//=//WATER

const float water_waves = 1.0;
const float under_water_waves = 1.0;
const float under_water_color = 1.0;
const float water_color = 1.0;

const float waveWidth = 10.5;
const float waveHeight = 0.0889;
const float speedwav = 1.3;

//=//WATER


//=//WAVES

const float grass_waves = 1.0;
const float leave_waves = 2.0;
const float vine_waves = 2.0;

//=//WAVES




//for waves
const highp float pi = 3.1415926535898932;
 
//Fog
const float fogdistance = 1.0;

//watercolor:
const float watertranz = 0.55;

//1.0 is no transparenz

/*
================================
with going under this line you may break the 
terms of use!
================================
*/


void main()
{

    POS4 worldPos;
#ifdef AS_ENTITY_RENDERER
		POS4 pos = WORLDVIEWPROJ * POSITION;
		worldPos = pos;
#else
    worldPos.xyz = (POSITION.xyz * CHUNK_ORIGIN_AND_SCALE.w) + CHUNK_ORIGIN_AND_SCALE.xyz;
    worldPos.w = 1.0;

    // Transform to view space before projection instead of all at once to avoid floating point errors
    // Not required for entities because they are already offset by camera translation before rendering
    // World position here is calculated above and can get huge
    POS4 pos = WORLDVIEW * worldPos;
    pos = PROJ * pos;
#endif
    gl_Position = pos;

    uv0 = TEXCOORD_0;
    uv1 = TEXCOORD_1;
	color = COLOR;


 waves = vec3(0.0);


#ifdef FANCY

	vec2 tex = floor(vec2(TEXCOORD_0.x * 32.0, TEXCOORD_0.y * 16.0));
 

   if (tex.x == 14.0 && tex.y == 11.0){


		waves.y = sin(waveWidth * worldPos.z * worldPos.x + TIME * speedwav); 

		waves.y = sin(waveWidth * worldPos.x + TIME * speedwav) * cos(waveWidth * worldPos.z+TIME*speedwav)*waves.y *waveHeight*0.9; 
   }
 


	#ifdef NEAR_WATER
		
		if (water_waves == 1.0){

    vec3 worldPoss = POSITION.xyz;

/*
float h = fract(worldPoss.y);
	float c0 = max(sign(h - 0.8125), 0.0);
	float c1 = 1.0 - max(sign(h - 0.9), 0.0);

*/
			waves.y = sin(waveWidth * worldPoss.z * worldPoss.x + TIME * speedwav);

			waves.y = sin(waveWidth * worldPoss.x + TIME * speedwav) * cos(waveWidth * worldPoss.z+TIME*speedwav)*waves.y *waveHeight;

		}
	
	#elif defined(ALPHA_TEST)

	
		if (leave_waves == 1.0){

		if ((tex.y == 5.0 && (tex.x == 24.0 || tex.x == 25.0 || tex.x == 26.0)) || (tex.y == 6.0 && (tex.x == 1.0 || tex.x == 2.0))){

				mediump float f = sin(TIME * pi) * 0.00125  + 0.01125;


				mediump float s1 = sin(TIME * pi / 11.2) * 3.1;

				waves.y = sin((TIME * 3.0 * pi / 1.51) + worldPos.z + worldPos.x + s1) * f;
		}
		}

       if (leave_waves == 2.0){
             
       if ((tex.y == 5.0 && (tex.x == 24.0 || tex.x == 25.0 || tex.x == 26.0)) || (tex.y == 6.0 && (tex.x == 1.0 || tex.x == 2.0))){
             float sw = 1.25; 
             float hw = 0.04 + sin(TIME)/75.0;

	          waves.x = sin(0.6 * worldPos.x + TIME * sw) * cos(0.6 * worldPos.z +TIME*sw)*hw;

	          waves.y = sin(0.6 * worldPos.x + TIME * sw) * cos(0.6 * worldPos.z +TIME*sw) *hw;

	          waves.z = sin(0.6 * worldPos.x + TIME * 0.9) * cos(0.6 * worldPos.z +TIME*sw)*hw;

       }
       }

		if (vine_waves == 1.0){
			if(tex.y == 11.0 && tex.x == 17.0){
				mediump float f = sin(TIME * pi) * 0.00125  + 0.01125;

				mediump float s1 = sin(TIME * pi / 11.2) * 3.1;

				waves.y = sin((TIME * 3.0 * pi / 1.51) + worldPos.z + worldPos.x + s1) * f;
			}
		}

  
    if (vine_waves == 2.0){
        if(tex.y == 11.0 && tex.x == 17.0){


            float sw = 1.25; 
             float hw = 0.04 + sin(TIME)/75.0;

	          waves.x = sin(0.6 * worldPos.x + TIME * sw) * cos(0.6 * worldPos.z +TIME*sw)*hw;

	          waves.y = sin(0.6 * worldPos.x + TIME * sw) * cos(0.6 * worldPos.z +TIME*sw) *hw;

	          waves.z = sin(0.6 * worldPos.x + TIME * 0.9) * cos(0.6 * worldPos.z +TIME*sw)*hw;

       }
     }

		if (grass_waves == 1.0){

			 if ((tex.y == 11.0 && tex.x == 9.0)||(tex.y == 11.0 && tex.x == 10.0)){ 


				float ww = sin(TIME)/75.0;
				waves.x = sin( worldPos.y *pi - worldPos.x *pi+TIME *4.0) * (0.04+ww); 
				waves.z = sin( worldPos.y *pi - worldPos .z *pi+TIME *4.0) * (0.04+ww); 

				if (waves.x < -0.1){
					waves.x *= 0.5;
				}
				if (waves.z < -0.1){
					waves.z *= 0.5;
				}
			}
		}
	#endif


	#ifdef FOG
		if (FOG_CONTROL.x <0.01){
			if (under_water_waves == 1.0 ){
				waves.x = sin(1.7 * worldPos.x + TIME * 1.3) * cos(1.7 * worldPos.z+TIME*1.2)*0.1; 
				waves.z = sin(1.6 * worldPos.x + TIME * 1.3) * cos(1.75 * worldPos.z+TIME*1.2)*0.1; 
			}
		}

	#endif

#ifndef AS_ENTITY_RENDERER
	worldPos.xyz += waves.xyz; 
	pos = WORLDVIEW * worldPos;
	pos = PROJ * pos; 

	gl_Position = pos;
#endif

#endif





///// find distance from the camera

#if defined(FOG) || defined(NEAR_WATER)
	#ifdef FANCY
		vec3 relPos = -worldPos.xyz;
		float cameraDepth = length(relPos);
		#ifdef NEAR_WATER
			cameraDist = cameraDepth / FAR_CHUNKS_DISTANCE;
		#endif
	#else
		float cameraDepth = pos.z;
		#ifdef NEAR_WATER
			vec3 relPos = -worldPos.xyz;
			float camDist = length(relPos);
			cameraDist = camDist / FAR_CHUNKS_DISTANCE;
		#endif
	#endif
#endif




///// apply fog

#ifdef FOG
	float len = cameraDepth / RENDER_DISTANCE;
	#ifdef ALLOW_FADE
		len += CURRENT_COLOR.r;
	#endif

  fogColor.rgb = FOG_COLOR.rgb;
	float uwt = 1.0;
	float ut = 0.0;
	
	if (FOG_CONTROL.x < 0.01){
		if (under_water_color == 1.0){
			uwt = 4.0;
			ut = 0.45;
			fogColor.rgb += vec3(-0.2,0.2,0.5);
		}
	}
	fogColor.a = clamp((len - FOG_CONTROL.x) / (FOG_CONTROL.y - FOG_CONTROL.x)/uwt, 0.0, fogdistance);

	if (FOG_CONTROL.x < 0.01){
	fogColor.a += ut;
	}
	else{

		if (fogColor.a >=0.6){
			fogColor.a = 0.6;
		}

		//fogColor.a += 0.1;
	}
#endif



/*
///// apply fog

#ifdef FOG
	float len = cameraDepth / RENDER_DISTANCE;
	#ifdef ALLOW_FADE
		len += CURRENT_COLOR.r;
	#endif

    fogColor.rgb = FOG_COLOR.rgb;
	fogColor.a = clamp((len - FOG_CONTROL.x) / (FOG_CONTROL.y - FOG_CONTROL.x), 0.0, 1.0);
#endif

*/





farc = pos.z / FAR_CHUNKS_DISTANCE;

 ///// water magic
#ifdef NEAR_WATER
	#ifdef FANCY  /////enhance water


		if (water_color == 1.0){

			float F = dot(normalize(relPos), UNIT_Y);
			F = 1.0 - max(F, 0.1);
			F = 1.0 - mix(F*F*F*F, 1.0, min(1.0, cameraDepth / FAR_CHUNKS_DISTANCE));

			color.rg -= vec2(F * DIST_DESATURATION);

			vec4 depthColor = vec4(color.rgb * 1.8 * (waves.y *1.2 + 1.0), watertranz+0.1 - waves.y);
			vec4 traspColor = vec4(color.rgb * 1.8 * (waves.y * 1.7 + 1.0),watertranz - waves.y * 1.2);
			vec4 surfColor = vec4(color.rgb, 0.93);

			vec4 nearColor = mix(traspColor, depthColor, color.a);
			color = mix(surfColor, nearColor, F);

		}

		else if (water_color == 2.0){

			float F = dot(normalize(relPos), UNIT_Y);
			F = 1.0 - max(F, 0.1);
			F = 1.0 - mix(F*F*F*F, 1.0, min(1.0, cameraDepth / FAR_CHUNKS_DISTANCE));

			color.rg -= vec2(F * DIST_DESATURATION);

			vec4 depthColor = vec4(color.rgb * 0.5, 1.0);
			vec4 traspColor = vec4(color.rgb * 0.45, 0.8);
			vec4 surfColor = vec4(color.rgb, 1.0);

			vec4 nearColor = mix(traspColor, depthColor, color.a);
			color = mix(surfColor, nearColor, F);
 


		}
		else{


 			float F = dot(normalize(relPos), UNIT_Y);
			F = 1.0 - max(F, 0.1);
			F = 1.0 - mix(F*F*F*F, 1.0, min(1.0, cameraDepth / FAR_CHUNKS_DISTANCE));

			color.rg -= vec2(F * DIST_DESATURATION);

			vec4 depthColor = vec4(color.rgb * 0.5,1.0);
			vec4 traspColor = vec4(color.rgb * 0.45, 0.8);
			vec4 surfColor = vec4(color.rgb, 1.0);

			vec4 nearColor = mix(traspColor, depthColor, color.a);
			color = mix(surfColor, nearColor, F);
 

		}
 

	#else
			vec4 surfColor = vec4(color.rgb, 1.0);
			color = surfColor;
			color.a = pos.z / FAR_CHUNKS_DISTANCE + 0.5;

		
	#endif //FANCY
#endif
}

