// __multiversion__
// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.

// To use centroid sampling we need to have version 300 es shaders, which requires changing:
// attribute to in
// varying to out when in vertex shaders or in when in fragment shaders
// defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
// texture2D to texture
#if __VERSION__ >= 300

// version 300 code

#ifdef MSAA_FRAMEBUFFER_ENABLED
#define _centroid centroid
#else
#define _centroid
#endif

#if defined(TEXEL_AA) && defined(TEXEL_AA_FEATURE)
_centroid in highp vec2;
_centroid in highp vec2 uv1;
#else
_centroid in vec2 uv0;
_centroid in vec2 uv1;
#endif

#define varying in
#define texture2D texture
out vec4 FragColor;
#define gl_FragColor FragColor

#else

// version 100 code
varying vec2 uv0;
varying vec2 uv1;

#endif


varying vec4 color;
varying POS3 posE;
varying vec3 waves;
varying vec3 screen_pos;

#ifdef FOG
varying vec4 fogColor;
#endif

#ifdef NEAR_WATER
varying float cameraDist;
#endif

#include "shaders/util.h"

uniform sampler2D TEXTURE_0;
uniform sampler2D TEXTURE_1;
uniform sampler2D TEXTURE_2;

uniform highp float TIME;
uniform vec2 FOG_CONTROL;
uniform float RENDER_DISTANCE;
uniform vec4 FOG_COLOR;
uniform POS3 VIEW_POS;

//SETTINGS!

//some variables YOU don't know xD
  const highp float pi = 3.14159265358979;

//Settings for the Shadows
  const bool Shadow = true;
    const float shwE = 0.880; //The width of the Shadows... If you set it to 0.0 there will also be Sunlight in a cave :P
    const vec2 fSwE = vec2(0.015, 1.0 / 0.015); //import: if you change the first, you must also change the third number! The 1.0 always(!) stays the same... but if you want you can also try to change it xD. If yoj want to know what that does: that the width of the fade in!
    const bool Shadow_fade_in = true;
  
  const bool Player_Shadow = true;
    const bool Player_Shadow_fade_in = true;
  
//for the water :D
  const bool cloud_reflection = false;
  const vec4 watercolor = vec4(0.0,0.0,0.9,0.3); //the water color near you
  const vec4 farwatercolor = vec4(0.1, 0.7, 0.4, 0.9); //the water color in the distance...

//torchlight!!1!
  const vec3 torch_light = vec3(0.5,0.45,0.05);
  
//Cave fog
  const bool Cave_fog = true;










highp float cloudmap(POS3 cp){

highp float pi = 3.14159265358979;
highp float ca = sin(length(cp.xz+vec2(TIME))*pi);
ca += cos(sin(cp.x-cp.z)*pi + length(cp.xyz+vec3(TIME))*pi);
highp float cb = sin(length(cp.xyz*pi+vec3(TIME))*pi);
cb += cos(sin(cp.x+cp.z+TIME)*pi - length(cp.xyz/pi+vec3(TIME))*pi);
//highp float cc = cos(length(vec3(ca,cp.x+cp.z,cb))*pi);
//highp float cd = sin(pi*cp.z/pi + cos(length(vec2(cos(cp.x*pi),sin(cp.z*pi)))));
highp float cloud = length(vec2(ca,cb));

cloud = (1.0-cloud)-0.2;
return cloud *= 1.0;
}


highp float refactionmap(highp float x, highp float z){
  highp float refa = length(vec2(x,z)*pi+vec2(TIME));
  highp float refb = sin(length(vec2(x+TIME,z+TIME*0.1))*pi-cos(length(vec2(x*x+TIME,z*z+TIME))));
  return (sin(refa)+refb);
}


highp float random(highp float x, highp float z){
  highp float ra = sin(x+(z*0.5+(x-10.0)))*0.1;
  highp float rb = sin(z+(x*0.5+(z-10.0)))*0.1;
  
  highp float rc = sin(x+cos(z+sin(x+z)));
  highp float rd = cos(z+sin(x+sin(z+x)));
  
  highp float re = sin(ra-cos(rc+sin(ra+rb)));
  highp float rf = cos(rb-cos(rd+sin(rb+rc)));
  return sin(ra+rb-rc+rd-re+rf);
}

highp float ran(highp float x, highp float z, highp float y){
  highp float ra = random(x + TIME, z + TIME) * y;
  highp float rb = random(sin(random(cos(y) + x, ra)), cos(random(ra, sin(y)+z)));
  return rb + ra;
}

void main()
{


float shE = 0.0;
float fadeInE = 0.0;

float Red = 0.0;

vec3 torchl = torch_light;

float tlfE = uv1.x;
float tlmix = 0.0;

float rainE = 0.0;
vec4 raincolor = vec4(0.441,0.46,0.484, 0.0);
float holefog = FOG_COLOR.r+FOG_COLOR.g+FOG_COLOR.b;
vec2 itsnight = vec2(0.0);
float nether = 0.0;
float texaa = 0.0;
float uw = 0.0;

//is it night?
    if(holefog <= 0.4){
        itsnight.x = 1.0;
        itsnight.y = 1.0-holefog*2.5;
    }

if (FOG_CONTROL.x < 0.55 && FOG_CONTROL.x > 0.1){
  rainE = 1.0;
  
  raincolor.a = min(1.0,length(posE.xz)/RENDER_DISTANCE);
  
  raincolor.a = min(1.0, raincolor.a + 0.3);
  raincolor.a = max(0.0, raincolor.a - max(0.0, uv1.x-0.5));
  raincolor.rgb = mix(raincolor.rgb, FOG_COLOR.rgb, raincolor.a);
}

if(FOG_COLOR.r < 0.25 && FOG_COLOR.b<0.25 && ((FOG_CONTROL.x < 0.55 && FOG_CONTROL.x > 0.1)) && FOG_COLOR.r > 0.1 && FOG_COLOR.r > FOG_COLOR.b && uv1.y == 0.0){
  nether = 1.0;
}
if(FOG_CONTROL.x < 0.05){
  uw == 1.0;
}

#if !defined(TEXEL_AA) || !defined(TEXEL_AA_FEATURE)
  texaa = 1.0;
#endif


float sideOfS = max(0.0,length(screen_pos.xy));

sideOfS = 1.0 - max(0.0,sideOfS-0.5);

#if !defined(TEXEL_AA) || !defined(TEXEL_AA_FEATURE)
	vec4 diffuse = texture2D( TEXTURE_0, uv0 );
#else
	vec4 diffuse = texture2D_AA(TEXTURE_0, uv0 );
#endif

	vec4 inColor = color;
	
#ifdef SEASONS_FAR
	diffuse.a = 1.0;
	inColor.b = 1.0;
#endif

#ifdef ALPHA_TEST
	#ifdef ALPHA_TO_COVERAGE
		float alphaThreshold = .05;
	#else
		float alphaThreshold = .5;
	#endif
	if(diffuse.a < alphaThreshold)
		discard;
#endif
	
	diffuse = diffuse * texture2D( TEXTURE_1, uv1 );

#ifndef SEASONS

#if !defined(ALPHA_TEST) && !defined(BLEND)
	diffuse.a = inColor.a;
#elif defined(BLEND)
	diffuse.a *= inColor.a;
	#ifdef NEAR_WATER
		float alphaFadeOut = clamp(cameraDist, 0.0, 1.0);
		diffuse.a = mix(diffuse.a, 1.0, alphaFadeOut);
	#endif
#endif	
	
	diffuse.rgb *= inColor.rgb;
#else
	vec2 uv = inColor.xy;
	diffuse.rgb *= mix(vec3(1.0,1.0,1.0), texture2D( TEXTURE_2, uv).rgb*2.0, inColor.b);
	diffuse.rgb *= inColor.aaa;
	diffuse.a = 1.0;
#endif




#ifdef FOG
 if(nether == 0.0){
	  diffuse.rgb = mix( diffuse.rgb, fogColor.rgb, fogColor.a);
	}
	
#endif


Red = max(0.0,1.0-diffuse.r);
torchl.r += Red;

//shadows
if(uv1.y <= shwE){
shE = 1.0;
if(uv1.y >= shwE-fSwE.x){
  if(Shadow_fade_in){
    fadeInE = (uv1.y - (shwE-fSwE.x))*fSwE.y;
    shE = mix(1.0,0.0,fadeInE);
  }else{
    shE = 1.0;
  }
}
}

if(Player_Shadow){

float nullp = (posE.y+1.5)*0.9;
float fadeInPS = 0.0;

float PSfact = 0.0;
if(posE.x < 0.3 && posE.x > -0.3 && posE.z < nullp+0.25 && posE.z > nullp-0.85){

  if(Player_Shadow_fade_in){

  if(abs(posE.x) > 0.2){
    fadeInPS = (abs(posE.x) - 0.2)*10.0;
    PSfact = 1.0-fadeInPS;
    if(posE.z > nullp+0.15){
      PSfact = 1.0 - (fadeInPS*0.5 + (posE.z - (nullp +0.15))*5.0);
    }  
  }else if(posE.z > nullp+0.15){
    fadeInPS = (posE.z - (nullp +0.15))*10.0;
    
      PSfact = 1.0-fadeInPS;
  }else{
    PSfact = 1.0;
  }
  
  }else{//Player_Shadow_fade_in
    PSfact = 1.0;
  }  
}
if(posE.x < 0.5 && posE.x > -0.5 && posE.z < nullp-0.75 && posE.z > nullp-1.75){

  if(Player_Shadow_fade_in){
  
  if(abs(posE.x) > 0.4){
    fadeInPS = (abs(posE.x) - 0.4)*10.0;
    PSfact = 1.0-fadeInPS;
    if(posE.z > nullp-0.85){
      PSfact = 1.0 - (fadeInPS*0.5 + (posE.z - (nullp -0.85))*5.0);
    }  
    else if(posE.z < nullp-1.65){
      PSfact = 1.0 - (fadeInPS*0.5 + (posE.z - (nullp -1.65))*(-5.0));
    }  
  }else if(posE.z > nullp-0.85 && PSfact == 0.0){
    fadeInPS = (posE.z - (nullp -0.85))*10.0;
    
    PSfact = 1.0-fadeInPS;
  }else if(posE.z < nullp-1.65){
    fadeInPS = (posE.z - (nullp - 1.65))*(-10.0);
    
    PSfact = 1.0-fadeInPS;  
  }else{
    PSfact = 1.0;
  }
  
  }else{//Player shadow fade in
    PSfact = 1.0;
  }
}
if(posE.x < 0.275 && posE.x > -0.275 && posE.z < nullp-1.65 && posE.z > nullp-2.139){

  if(Player_Shadow_fade_in){
  
  if(abs(posE.x) > 0.175){
    fadeInPS = (abs(posE.x) - 0.175)*10.0;
    PSfact = 1.0-fadeInPS;
  }else{
    PSfact = 1.0;
  }
  
  }else{//Player shadow fade in
    PSfact = 1.0;
  }
}
PSfact -= max(0.0,itsnight.y*2.0 + abs(posE.y+1.5)*0.01);
PSfact -= min(1.0, max(0.0, posE.y));

if(posE.z > 0.0){
  PSfact -= min(1.0, posE.z*10.0);
}
shE = min(1.0, shE+max(0.0,PSfact));
}

//shE = max(0.0,shE-(uv1.x));

#ifdef FOG
shE = max(0.0,shE-fogColor.a*5.0);
#endif



#ifdef NEAR_WATER
diffuse = mix(watercolor*(1.0 - itsnight.y*0.4), farwatercolor*(1.0 - itsnight.y*0.4), max(0.0, max(0.0, min(1.0, color.a-itsnight.y*0.6))));


if(cloud_reflection){
highp float ca;
highp float cloud;
highp float x = (posE.x*0.05)+TIME*0.1;
highp float z = (posE.z*0.05)+TIME*0.1;

ca = sin(x*0.5-z*0.5)+cos(x*0.6+z*0.6)+sin(-z+x);
cloud = random(x*2.0,z*2.0)-random(ca,pi);

cloud *= 0.5;

x = (posE.x + VIEW_POS.x);
z = (posE.z + VIEW_POS.z);
highp float a = x-z;
highp float p = sin(pi*x*x+TIME*0.1);

//highp float ref = refactionmap(x,z);


cloud = cloud;
 
	diffuse = mix(diffuse, vec4(1.0), max(0.0, min(0.75, 1.0-min(1.0,cloud+1.0))));
}



#ifdef FOG
if(color.a == 0.0){
  diffuse = fogColor;
  diffuse.gb += waves.y*1.5;
}
#endif

#ifndef FOG
POS3 cpe = (posE+VIEW_POS)*2.0;
 
 
#endif
#endif



//sunlight
float isl_f= 1.0-(diffuse.r+diffuse.g+diffuse.b)/3.0;
vec4 isl_v =vec4(1.0+isl_f,0.9+isl_f,0.8+isl_f,1.0);

isl_v.rgb *= 1.0-shE*1.1;
isl_v.rgb = max(vec3(1.0),isl_v.rgb);

diffuse.rgb *= isl_v.rgb;


vec4 ug = vec4(1.0);
ug.a = min(0.93,max(0.0,(uv1.y+uv1.x)+0.7));
ug.rgb = vec3(0.39);

if(nether == 1.0){
  raincolor.a = min(1.0, raincolor.a+0.2);
  raincolor.rgb = mix(vec3(0.76, 0.3, 0.2), FOG_COLOR.rgb, raincolor.a);
  ug.rgb = FOG_COLOR.rgb;
}

if(uw==0.0){if(Cave_fog){diffuse.rgb = mix(ug.rgb,diffuse.rgb,ug.a);}}
diffuse.rgb += torchl*max(0.0,uv1.x-0.5);

if(itsnight.x == 1.0){
  vec3 oldd = diffuse.rgb;
  float mixn = max(0.0,itsnight.y - uv1.x);
  
  mixn = mix(0.0, mixn, max(0.0,uv1.y - 0.2)*2.1);
  #ifndef NEAR_WATER
  oldd.r *= 0.1;
  oldd.g *= 0.3;
  oldd.b *= 0.5;
  
  
  diffuse.rgb = mix(diffuse.rgb,oldd*1.5,mixn);
  #endif
}

#ifndef NEAR_WATER
diffuse.rgb = mix(diffuse.rgb*0.65,diffuse.rgb,sideOfS);
diffuse.rgb *= sideOfS;
#endif

diffuse.rgb = mix(diffuse.rgb,raincolor.rgb,raincolor.a);


//diffuse += vec4(tlE);//torchlightE;

float id = uv0.x * 100.0;

/*if(texaa == 1.0){
  vec4 test = texture2D( TEXTURE_0, uv0);
  diffuse.rgb = test.rgb*color.rgb;
}*/

	gl_FragColor = diffuse;
}
