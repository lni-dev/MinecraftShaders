// __multiversion__
// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.

// To use centroid sampling we need to have version 300 es shaders, which requires changing:
// attribute to in
// varying to out when in vertex shaders or in when in fragment shaders
// defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
// texture2D to texture
#if __VERSION__ >= 300

// version 300 code

#ifdef MSAA_FRAMEBUFFER_ENABLED
#define _centroid centroid
#else
#define _centroid
#endif

#if defined(TEXEL_AA) && defined(TEXEL_AA_FEATURE)
_centroid in highp vec2;
_centroid in highp vec2 uv1;
#else
_centroid in vec2 uv0;
_centroid in vec2 uv1;
#endif

#define varying in
#define texture2D texture
out vec4 FragColor;
#define gl_FragColor FragColor

#else

// version 100 code
varying vec2 uv0;
varying vec2 uv1;

#endif


varying vec4 color;
varying POS3 posE;
varying vec3 waves;
varying vec3 screen_pos;


#ifdef FOG
varying vec4 fogColor;
#endif

#ifdef NEAR_WATER
varying float cameraDist;
#endif

#include "shaders/util.h"

uniform sampler2D TEXTURE_0;
uniform sampler2D TEXTURE_1;
uniform sampler2D TEXTURE_2;

uniform highp float TIME;
//uniform int time;
uniform vec2 FOG_CONTROL;
uniform float RENDER_DISTANCE;
uniform vec4 FOG_COLOR;
uniform POS3 VIEW_POS;
uniform float FAR_CHUNKS_DISTANCE;
//uniform highp vec3 TEXTURE_DIMENSIONS;

//SETTINGS!

//some variables YOU don't know xD
  const highp float pi = 3.14159265358979;

//Settings for the Shadows
  const bool Shadow = true;
    const float shwE = 0.870; //The width of the Shadows... If you set it to 0.0 there will also be Sunlight in a cave :P
    const vec2 fSwE = vec2(0.025, 1.0 / 0.025); //import: if you change the first, you must also change the third number! The 1.0 always(!) stays the same... but if you want you can also try to change it xD. If you want to know what that does: that the width of the fade in!
    const bool Shadow_fade_in = true;
  
  
//for the water :D
  const vec4 watercolor = vec4(0.2,0.2,0.3,0.05); //the water color near you
  const vec4 farwatercolor = vec4(0.3, 0.3, 0.4, 1.0); //the water color in the distance...

//torchlight!!1!
  const vec3 torch_light = vec3(0.5,0.45,0.05);
  
//Cave fog
  const bool Cave_fog = true;


//Water

//For Reflection:
#define REFLECTION
#define WATER_COLOR 0.1, 0.25, 0.5	//Only If REFLECTION is defined!
#define SKY_COLOR 0.1, 0.35, 0.7
#define SKY_HEIGH 270.0

//For Blur:
//#define BLUR
#define BLUR_ATLAS_EXPANDTION 0.0001







vec4 EnergyColorMap(vec4 c){
	float R,G,B;
	
	R = c.r;
	G = c.g;
	B = c.b;
	
	R = mix(R,R * 1.5, max(0.0, R - (G + B)));
	G = mix(G,G * 1.5, max(0.0, G - (R + B)));
	B = mix(B,B * 1.5, max(0.0, B - (G + R)));

  return vec4(R, G, B, c.a);
}

//Function by Will!
vec2 ran(vec2 p){
  p = fract(p * vec2(443.897, 441.423));
  p += dot(p, p.yx + 19.19);
  return fract((p.xx + p.yx)*p.xy) * 5.0 - 1.0;
}

vec3 worldPosToCloudPos(POS3 CamPos, POS3 p, float YOffset, float sky_height){
	float YtoCamY = abs(CamPos.y - p.y);
  
	if(p.y <= 0.0){
		p.y = min(-3.0, p.y);
	}
	
	vec3 NToCloud = normalize(reflect(p + vec3(0.0, YOffset, 0.0) , normalize(CamPos)));
	
	//Expand factor 
	float Expandfactor = sky_height / NToCloud.y; 
	
	//It is now it the heigh of the clouds, and it would be the right refletion, but the sky position doesn't equals the worldPos, so it is still not real :/ 
	vec3 UnrealCloudPos = NToCloud * Expandfactor;
  
  
	return (UnrealCloudPos / RENDER_DISTANCE) / 30.0;
}

float wave1(vec2 p, float f1, float f2, float t){
	
	float w1 = (sin(p.x*f1 + t) * sin(p.y*f2 + t));
	
	w1 = w1 - max(0.0, w1-0.8)*4.0;
	
	return w1;
}

float getRain(){
  return min(1.0, max(0.0, 1.0-pow(FOG_CONTROL.y,5.0))*2.0);
}

highp float  unrealPos(highp float x, highp float z, float fact){
  highp float factor = length(vec2(x, z));
  
  return fact - factor*15.0;
}

float clacCodeBasedNoiseTexture(vec2 a){
  float ca = sin(a.x + TIME*0.1 + a.y - a.x + sin(a.x+TIME*0.1) + cos(a.y + a.y - a.x));
  float cc = sin(a.x+(cos(a.y)*0.1));
  float cd = 0.0;
  
  return ca*1.5/*-cb*/*cc;
}

float clacCodeBasedSmallNoiseTexture(vec2 a){
  float ca = sin(a.x + a.y - a.x + sin(a.x) + cos(a.y + a.y - a.x)) - sin(a.x + a.x - a.y *sin(a.y) - a.y)+sin((cos(a.x)+cos(a.y))*sin(a.x+a.y));


  return ca;
}



vec4 CloudColor(float a, vec3 fog){
  vec3 cloudColor = vec3(1.5);
  
  cloudColor *= fog*2.0;
  
  cloudColor = mix(cloudColor, vec3(1.3, 0.7, 0.95), fog.r);
  
  
  cloudColor *= mix(vec3(1.0) , vec3(0.25, 0.3, 0.3), getRain());
  a += 0.3*getRain();
  
  
  cloudColor = min(vec3(1.0), cloudColor);
  
  return vec4(cloudColor, min(0.95, a));
}

vec4 calcClouds(POS3 pos){
	vec4 cloud = vec4(0.0);
	
	highp float x = pos.x;
highp float z = pos.z;


cloud.a = unrealPos(x ,z, 6.0);

x *= 2.0 * (cloud.a*4.0);
z *= 2.0 * (cloud.a*4.0);

z += TIME * 0.05;
x += TIME * 0.001;

cloud.a = max(0.0, sin(x - cos(z*2.0)));
cloud.a = clacCodeBasedNoiseTexture(vec2(x, z));
cloud.a = (mix(clacCodeBasedNoiseTexture((vec2(x, z*0.7))*5.0), cloud.a, cloud.a)*max(0.0, cloud.a))*2.0;
cloud.a *= 0.2;
cloud.a -= cloud.a * 0.2 * cloud.a;
cloud.a *= max(0.0, min(1.0, unrealPos(pos.x, pos.z, 4.0)));



cloud = CloudColor(cloud.a, FOG_COLOR.rgb);

	
	return cloud;
}

vec4 AllReflections(POS3 CamPos, POS3 p, float sky_height, vec3 sky_color, float YO){
	
	vec3 AllR = sky_color;
		
	POS3 CloudPos = worldPosToCloudPos(vec3(0.0, 1.75, 0.0), p, YO, sky_height);
	vec4 cloudReflection = calcClouds(CloudPos);
	
	highp float dis = length(CloudPos.xz);
	vec3 HSky_color = mix(sky_color, FOG_COLOR.rgb, clamp(dis*1.3, 0.0, 1.0));
	
	AllR = mix(HSky_color, cloudReflection.rgb, max(0.0, min(1.0, cloudReflection.a*0.2)));
	
	//cloudReflection.a = max(0.0, cloudReflection.a - max(0.0, 10.0 - length(p.xz)));
	
	return vec4(AllR, cloudReflection.a);
}

vec4 waterColor(vec4 Reflection, float a, vec3 waterColor, float YO){
	vec4 wC = vec4(mix(waterColor, Reflection.rgb, min(1.0, max(0.0, a + Reflection.a - 0.35-YO)) - (1.0 - uv1.y*1.2)), a);
	return wC;
}

void main()
{

float shE = 0.0;
float fadeInE = 0.0;

float Red = 0.0;

vec3 torchl = torch_light;

float tlfE = uv1.x;
float tlmix = 0.0;

float rainE = 0.0;
vec4 raincolor = vec4(0.441,0.46,0.484, 0.0);
float holefog = FOG_COLOR.r+FOG_COLOR.g+FOG_COLOR.b;
vec2 itsnight = vec2(0.0);
float nether = 0.0;
float uw = 0.0;
bool water = false;
POS3 RposE = posE + VIEW_POS;

//is it night?
    if(holefog <= 0.4){
        itsnight.x = 1.0;
        itsnight.y = 1.0-holefog*2.5;
    }
	
	
//Rain effect. (It is claculated always, this may causes more lags, but looks much smoother!)
float rain = min(1.0, max(0.0, 1.0-pow(FOG_CONTROL.y,5.0))*2.0); 
if(rain > 0.0){
	raincolor.a = min(1.0,length(posE.xz)/RENDER_DISTANCE); 
	raincolor.a = min(1.0, raincolor.a + 0.3);
	raincolor.a = max(0.0, raincolor.a - max(0.0, uv1.x-0.5))*rain;
	raincolor.rgb = mix(raincolor.rgb, FOG_COLOR.rgb, raincolor.a);
	raincolor.a = max(0.0, raincolor.a - max(0.0, 0.8 - uv1.y));
}

if(FOG_COLOR.r < 0.25 && FOG_COLOR.b<0.25 && ((FOG_CONTROL.x < 0.55 && FOG_CONTROL.x > 0.1)) && FOG_COLOR.r > 0.1 && FOG_COLOR.r > FOG_COLOR.b && uv1.y == 0.0){
  nether = 1.0;
}
if(FOG_CONTROL.x < 0.05){
  uw == 1.0;
}

//Far Water fix
if(fract(RposE.y) < 0.1 && fract(RposE.y) >= 0.0 && color.r < 0.85 && color.b > color.g){
	#ifdef FOG
		water = true;
	#endif
}

#ifdef NEAR_WATER
	water = true;
#endif


float sideOfS = max(0.0,length(screen_pos.xy));

sideOfS = (0.55 + min(max((screen_pos.z-1.0)*0.1,0.0),0.45)) - max(0.0,sideOfS);
sideOfS = max(min( sideOfS *10.0, 1.0), 0.0);


//Normal diffuse and Blur diffuse!
#if !defined(TEXEL_AA) || !defined(TEXEL_AA_FEATURE)
	vec4 diffuse = texture2D( TEXTURE_0, uv0 );
	#ifdef BLUR
		vec4 bdiffuse = texture2D( TEXTURE_0, uv0 + ran(uv0) * vec2(BLUR_ATLAS_EXPANDTION) )*color;
	#endif
#else
	vec4 diffuse = texture2D_AA(TEXTURE_0, uv0 );
	
	#ifdef BLUR
		vec4 bdiffuse = texture2D_AA( TEXTURE_0, uv0 + ran(uv0) * vec2(BLUR_ATLAS_EXPANDTION))*color;
	#endif
#endif

//Mojang stuff, add Blur diffuse to everything...
vec4 inColor = color;

#ifdef SEASONS_FAR
	diffuse.a = 1.0;
	inColor.b = 1.0;
#endif

#ifdef ALPHA_TEST
	#ifdef ALPHA_TO_COVERAGE
		float alphaThreshold = .05;
	#else
		float alphaThreshold = .5;
	#endif
	if(diffuse.a < alphaThreshold)
		discard;
#endif

//Mojang shadows and light
diffuse = diffuse * texture2D( TEXTURE_1, uv1 );
#ifdef BLUR
	bdiffuse = bdiffuse * texture2D( TEXTURE_1, uv1 );
#endif

#ifndef SEASONS

#if !defined(ALPHA_TEST) && !defined(BLEND)
	diffuse.a = inColor.a;
#elif defined(BLEND)
	diffuse.a *= inColor.a;
	#ifdef NEAR_WATER
		float alphaFadeOut = clamp(cameraDist, 0.0, 1.0);
		
		diffuse.a = mix(diffuse.a, 1.0, alphaFadeOut);
		//diffuse.a = mix(diffuse.a, 1.0, alphaFadeOut);
	#endif
#endif	
	
	diffuse.rgb *= inColor.rgb;
#else
	vec2 uv = inColor.xy;
	diffuse.rgb *= mix(vec3(1.0,1.0,1.0), texture2D( TEXTURE_2, uv).rgb*2.0, inColor.b);
	diffuse.rgb *= inColor.aaa;
	diffuse.a = 1.0;
	
	#ifdef BLUR
		bdiffuse.rgb *= mix(vec3(1.0,1.0,1.0), texture2D( TEXTURE_2, uv).rgb*2.0, inColor.b);
		bdiffuse.rgb *= inColor.aaa;
		bdiffuse.a = 1.0;
	#endif
	
#endif



//Active Fog!
#ifdef FOG
	if(nether == 0.0){
		diffuse.rgb = mix( diffuse.rgb, fogColor.rgb, fogColor.a);
		#ifdef BLUR
			bdiffuse.rgb = mix( bdiffuse.rgb, fogColor.rgb, fogColor.a);
		#endif
	}	
#endif


Red = max(0.0,1.0-diffuse.r);
torchl.r += Red;

//shadows
if(uv1.y <= shwE){
	shE = 1.0;
	if(uv1.y >= shwE-fSwE.x){
		if(Shadow_fade_in){
			fadeInE = (uv1.y - (shwE-fSwE.x))*fSwE.y;
			shE = mix(1.0,0.0,fadeInE);
		}else{
			shE = 1.0;
		}
	}
	shE = max(0.0, shE - max(0.0, uv1.x-0.5)*5.0);
}

//Reduce Shadow in Fog very fast, becuase it looks rlly awful in Fog!
#ifdef FOG
	shE = max(0.0, shE-fogColor.a * 5.0);
#endif



if(water){
	#ifdef REFLECTION
	
		float rscale = 0.15; 
		float refrac = wave1(posE.xy + vec2(0.5, 0.9) * 1.5 * rscale, 0.7, 1.8, -TIME*1.2) *  wave1(posE.xz * 0.5 * rscale, 1.12, 1.3, TIME*1.3)*wave1(posE.zx * 0.9 * rscale, 1.62, 0.5, TIME*1.6);
		
		diffuse = waterColor(AllReflections(vec3(0.0, 1.75, 0.0), posE.xyz, 200.0,  vec3(0.1, 0.35, 0.7), refrac*5.0), clamp((length(posE.xyz) / RENDER_DISTANCE)*4.5, 0.5, 1.0), vec3(WATER_COLOR), refrac*0.0);
	
	#else
		diffuse = mix(vec4(0.2, 0.3, 0.7, 0.3), vec4(0.2, 0.5, 0.6, 0.7), color.a);
	#endif

#ifdef FOG
	if(uw == 1.0){
	  diffuse.rgb = vec3(WATER_COLOR);
	}
#endif
}



//sunlight
float isl_f= 1.0-(diffuse.r+diffuse.g+diffuse.b)/3.0;
vec4 isl_v =vec4(1.0+isl_f,0.9+isl_f,0.8+isl_f,1.0);

isl_v.rgb *= 1.0-shE*1.1;
#ifdef FOG
	isl_v *= max(0.0, 1.0 - min(1.0, max(0.0, fogColor.a - 0.7) * 0.5));
#endif
isl_v.rgb = max(vec3(1.0),isl_v.rgb);

diffuse.rgb *= isl_v.rgb;

#ifdef BLUR
	bdiffuse.rgb *= isl_v.rgb*0.9;
#endif


vec4 ug = vec4(1.0);
ug.a = min(1.0, max(0.0, (uv1.y * 1.3) + max(0.0, uv1.x - 0.5) + 0.7));
ug.rgb = vec3(0.32, 0.35, 0.55);

if(nether == 1.0){
  raincolor.a = min(1.0, raincolor.a+0.2);
  raincolor.rgb = mix(vec3(0.76, 0.3, 0.2), FOG_COLOR.rgb, raincolor.a);
  ug.rgb = FOG_COLOR.rgb;
}

if(uw==0.0){if(Cave_fog){
	diffuse.rgb = mix(ug.rgb,diffuse.rgb,ug.a);
	#ifdef BLUR
		bdiffuse.rgb = mix(ug.rgb,bdiffuse.rgb,ug.a);
	#endif
}}

diffuse.rgb += torchl*max(0.0,uv1.x-0.5);
#ifdef BLUR
	bdiffuse.rgb += torchl*max(0.0,uv1.x-0.5);
#endif

if(itsnight.x == 1.0){
	vec3 oldd = diffuse.rgb;
	float mixn = max(0.0,itsnight.y - uv1.x);
  
	mixn = mix(0.0, mixn, max(0.0,uv1.y - 0.2)*2.1);
		#ifndef NEAR_WATER
		oldd.r *= 0.1;
		oldd.g *= 0.3;
		oldd.b *= 0.5;
  
		diffuse.rgb = mix(diffuse.rgb,oldd*1.5,mixn);
		#ifdef BLUR
			bdiffuse.rgb = mix(bdiffuse.rgb,oldd*1.5,mixn);
		#endif
  #endif
}


#ifdef BLUR
#ifndef NEAR_WATER
	diffuse.rgb = mix(bdiffuse.rgb, diffuse.rgb, sideOfS-max(0.0, 0.8 - min(screen_pos.z, 0.8) ));
#endif
#endif

diffuse.rgb = mix(diffuse.rgb, raincolor.rgb, raincolor.a);


gl_FragColor = EnergyColorMap(diffuse);
}
